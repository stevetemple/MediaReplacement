// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { GetCultureData, GetCultureResponses, GetCultureErrors, PostDataTypeData, PostDataTypeResponses, PostDataTypeErrors, DeleteDataTypeByIdData, DeleteDataTypeByIdResponses, DeleteDataTypeByIdErrors, GetDataTypeByIdData, GetDataTypeByIdResponses, GetDataTypeByIdErrors, PutDataTypeByIdData, PutDataTypeByIdResponses, PutDataTypeByIdErrors, PostDataTypeByIdCopyData, PostDataTypeByIdCopyResponses, PostDataTypeByIdCopyErrors, GetDataTypeByIdIsUsedData, GetDataTypeByIdIsUsedResponses, GetDataTypeByIdIsUsedErrors, PutDataTypeByIdMoveData, PutDataTypeByIdMoveResponses, PutDataTypeByIdMoveErrors, GetDataTypeByIdReferencedByData, GetDataTypeByIdReferencedByResponses, GetDataTypeByIdReferencedByErrors, GetDataTypeByIdReferencesData, GetDataTypeByIdReferencesResponses, GetDataTypeByIdReferencesErrors, GetDataTypeConfigurationData, GetDataTypeConfigurationResponses, GetDataTypeConfigurationErrors, PostDataTypeFolderData, PostDataTypeFolderResponses, PostDataTypeFolderErrors, DeleteDataTypeFolderByIdData, DeleteDataTypeFolderByIdResponses, DeleteDataTypeFolderByIdErrors, GetDataTypeFolderByIdData, GetDataTypeFolderByIdResponses, GetDataTypeFolderByIdErrors, PutDataTypeFolderByIdData, PutDataTypeFolderByIdResponses, PutDataTypeFolderByIdErrors, GetFilterDataTypeData, GetFilterDataTypeResponses, GetFilterDataTypeErrors, GetItemDataTypeData, GetItemDataTypeResponses, GetItemDataTypeErrors, GetItemDataTypeSearchData, GetItemDataTypeSearchResponses, GetItemDataTypeSearchErrors, GetTreeDataTypeAncestorsData, GetTreeDataTypeAncestorsResponses, GetTreeDataTypeAncestorsErrors, GetTreeDataTypeChildrenData, GetTreeDataTypeChildrenResponses, GetTreeDataTypeChildrenErrors, GetTreeDataTypeRootData, GetTreeDataTypeRootResponses, GetTreeDataTypeRootErrors, GetDictionaryData, GetDictionaryResponses, GetDictionaryErrors, PostDictionaryData, PostDictionaryResponses, PostDictionaryErrors, DeleteDictionaryByIdData, DeleteDictionaryByIdResponses, DeleteDictionaryByIdErrors, GetDictionaryByIdData, GetDictionaryByIdResponses, GetDictionaryByIdErrors, PutDictionaryByIdData, PutDictionaryByIdResponses, PutDictionaryByIdErrors, GetDictionaryByIdExportData, GetDictionaryByIdExportResponses, GetDictionaryByIdExportErrors, PutDictionaryByIdMoveData, PutDictionaryByIdMoveResponses, PutDictionaryByIdMoveErrors, PostDictionaryImportData, PostDictionaryImportResponses, PostDictionaryImportErrors, GetItemDictionaryData, GetItemDictionaryResponses, GetItemDictionaryErrors, GetTreeDictionaryAncestorsData, GetTreeDictionaryAncestorsResponses, GetTreeDictionaryAncestorsErrors, GetTreeDictionaryChildrenData, GetTreeDictionaryChildrenResponses, GetTreeDictionaryChildrenErrors, GetTreeDictionaryRootData, GetTreeDictionaryRootResponses, GetTreeDictionaryRootErrors, PostDocumentBlueprintData, PostDocumentBlueprintResponses, PostDocumentBlueprintErrors, DeleteDocumentBlueprintByIdData, DeleteDocumentBlueprintByIdResponses, DeleteDocumentBlueprintByIdErrors, GetDocumentBlueprintByIdData, GetDocumentBlueprintByIdResponses, GetDocumentBlueprintByIdErrors, PutDocumentBlueprintByIdData, PutDocumentBlueprintByIdResponses, PutDocumentBlueprintByIdErrors, PutDocumentBlueprintByIdMoveData, PutDocumentBlueprintByIdMoveResponses, PutDocumentBlueprintByIdMoveErrors, GetDocumentBlueprintByIdScaffoldData, GetDocumentBlueprintByIdScaffoldResponses, GetDocumentBlueprintByIdScaffoldErrors, PostDocumentBlueprintFolderData, PostDocumentBlueprintFolderResponses, PostDocumentBlueprintFolderErrors, DeleteDocumentBlueprintFolderByIdData, DeleteDocumentBlueprintFolderByIdResponses, DeleteDocumentBlueprintFolderByIdErrors, GetDocumentBlueprintFolderByIdData, GetDocumentBlueprintFolderByIdResponses, GetDocumentBlueprintFolderByIdErrors, PutDocumentBlueprintFolderByIdData, PutDocumentBlueprintFolderByIdResponses, PutDocumentBlueprintFolderByIdErrors, PostDocumentBlueprintFromDocumentData, PostDocumentBlueprintFromDocumentResponses, PostDocumentBlueprintFromDocumentErrors, GetItemDocumentBlueprintData, GetItemDocumentBlueprintResponses, GetItemDocumentBlueprintErrors, GetTreeDocumentBlueprintAncestorsData, GetTreeDocumentBlueprintAncestorsResponses, GetTreeDocumentBlueprintAncestorsErrors, GetTreeDocumentBlueprintChildrenData, GetTreeDocumentBlueprintChildrenResponses, GetTreeDocumentBlueprintChildrenErrors, GetTreeDocumentBlueprintRootData, GetTreeDocumentBlueprintRootResponses, GetTreeDocumentBlueprintRootErrors, PostDocumentTypeData, PostDocumentTypeResponses, PostDocumentTypeErrors, DeleteDocumentTypeByIdData, DeleteDocumentTypeByIdResponses, DeleteDocumentTypeByIdErrors, GetDocumentTypeByIdData, GetDocumentTypeByIdResponses, GetDocumentTypeByIdErrors, PutDocumentTypeByIdData, PutDocumentTypeByIdResponses, PutDocumentTypeByIdErrors, GetDocumentTypeByIdAllowedChildrenData, GetDocumentTypeByIdAllowedChildrenResponses, GetDocumentTypeByIdAllowedChildrenErrors, GetDocumentTypeByIdBlueprintData, GetDocumentTypeByIdBlueprintResponses, GetDocumentTypeByIdBlueprintErrors, GetDocumentTypeByIdCompositionReferencesData, GetDocumentTypeByIdCompositionReferencesResponses, GetDocumentTypeByIdCompositionReferencesErrors, PostDocumentTypeByIdCopyData, PostDocumentTypeByIdCopyResponses, PostDocumentTypeByIdCopyErrors, GetDocumentTypeByIdExportData, GetDocumentTypeByIdExportResponses, GetDocumentTypeByIdExportErrors, PutDocumentTypeByIdImportData, PutDocumentTypeByIdImportResponses, PutDocumentTypeByIdImportErrors, PutDocumentTypeByIdMoveData, PutDocumentTypeByIdMoveResponses, PutDocumentTypeByIdMoveErrors, GetDocumentTypeAllowedAtRootData, GetDocumentTypeAllowedAtRootResponses, GetDocumentTypeAllowedAtRootErrors, PostDocumentTypeAvailableCompositionsData, PostDocumentTypeAvailableCompositionsResponses, PostDocumentTypeAvailableCompositionsErrors, GetDocumentTypeConfigurationData, GetDocumentTypeConfigurationResponses, GetDocumentTypeConfigurationErrors, PostDocumentTypeFolderData, PostDocumentTypeFolderResponses, PostDocumentTypeFolderErrors, DeleteDocumentTypeFolderByIdData, DeleteDocumentTypeFolderByIdResponses, DeleteDocumentTypeFolderByIdErrors, GetDocumentTypeFolderByIdData, GetDocumentTypeFolderByIdResponses, GetDocumentTypeFolderByIdErrors, PutDocumentTypeFolderByIdData, PutDocumentTypeFolderByIdResponses, PutDocumentTypeFolderByIdErrors, PostDocumentTypeImportData, PostDocumentTypeImportResponses, PostDocumentTypeImportErrors, GetItemDocumentTypeData, GetItemDocumentTypeResponses, GetItemDocumentTypeErrors, GetItemDocumentTypeSearchData, GetItemDocumentTypeSearchResponses, GetItemDocumentTypeSearchErrors, GetTreeDocumentTypeAncestorsData, GetTreeDocumentTypeAncestorsResponses, GetTreeDocumentTypeAncestorsErrors, GetTreeDocumentTypeChildrenData, GetTreeDocumentTypeChildrenResponses, GetTreeDocumentTypeChildrenErrors, GetTreeDocumentTypeRootData, GetTreeDocumentTypeRootResponses, GetTreeDocumentTypeRootErrors, GetDocumentVersionData, GetDocumentVersionResponses, GetDocumentVersionErrors, GetDocumentVersionByIdData, GetDocumentVersionByIdResponses, GetDocumentVersionByIdErrors, PutDocumentVersionByIdPreventCleanupData, PutDocumentVersionByIdPreventCleanupResponses, PutDocumentVersionByIdPreventCleanupErrors, PostDocumentVersionByIdRollbackData, PostDocumentVersionByIdRollbackResponses, PostDocumentVersionByIdRollbackErrors, GetCollectionDocumentByIdData, GetCollectionDocumentByIdResponses, GetCollectionDocumentByIdErrors, PostDocumentData, PostDocumentResponses, PostDocumentErrors, DeleteDocumentByIdData, DeleteDocumentByIdResponses, DeleteDocumentByIdErrors, GetDocumentByIdData, GetDocumentByIdResponses, GetDocumentByIdErrors, PutDocumentByIdData, PutDocumentByIdResponses, PutDocumentByIdErrors, GetDocumentByIdAuditLogData, GetDocumentByIdAuditLogResponses, GetDocumentByIdAuditLogErrors, PostDocumentByIdCopyData, PostDocumentByIdCopyResponses, PostDocumentByIdCopyErrors, GetDocumentByIdDomainsData, GetDocumentByIdDomainsResponses, GetDocumentByIdDomainsErrors, PutDocumentByIdDomainsData, PutDocumentByIdDomainsResponses, PutDocumentByIdDomainsErrors, PutDocumentByIdMoveData, PutDocumentByIdMoveResponses, PutDocumentByIdMoveErrors, PutDocumentByIdMoveToRecycleBinData, PutDocumentByIdMoveToRecycleBinResponses, PutDocumentByIdMoveToRecycleBinErrors, GetDocumentByIdNotificationsData, GetDocumentByIdNotificationsResponses, GetDocumentByIdNotificationsErrors, PutDocumentByIdNotificationsData, PutDocumentByIdNotificationsResponses, PutDocumentByIdNotificationsErrors, DeleteDocumentByIdPublicAccessData, DeleteDocumentByIdPublicAccessResponses, DeleteDocumentByIdPublicAccessErrors, GetDocumentByIdPublicAccessData, GetDocumentByIdPublicAccessResponses, GetDocumentByIdPublicAccessErrors, PostDocumentByIdPublicAccessData, PostDocumentByIdPublicAccessResponses, PostDocumentByIdPublicAccessErrors, PutDocumentByIdPublicAccessData, PutDocumentByIdPublicAccessResponses, PutDocumentByIdPublicAccessErrors, PutDocumentByIdPublishData, PutDocumentByIdPublishResponses, PutDocumentByIdPublishErrors, PutDocumentByIdPublishWithDescendantsData, PutDocumentByIdPublishWithDescendantsResponses, PutDocumentByIdPublishWithDescendantsErrors, GetDocumentByIdPublishWithDescendantsResultByTaskIdData, GetDocumentByIdPublishWithDescendantsResultByTaskIdResponses, GetDocumentByIdPublishWithDescendantsResultByTaskIdErrors, GetDocumentByIdPublishedData, GetDocumentByIdPublishedResponses, GetDocumentByIdPublishedErrors, GetDocumentByIdReferencedByData, GetDocumentByIdReferencedByResponses, GetDocumentByIdReferencedByErrors, GetDocumentByIdReferencedDescendantsData, GetDocumentByIdReferencedDescendantsResponses, GetDocumentByIdReferencedDescendantsErrors, PutDocumentByIdUnpublishData, PutDocumentByIdUnpublishResponses, PutDocumentByIdUnpublishErrors, PutUmbracoManagementApiV11DocumentByIdValidate11Data, PutUmbracoManagementApiV11DocumentByIdValidate11Responses, PutUmbracoManagementApiV11DocumentByIdValidate11Errors, GetUmbracoManagementApiV1DocumentByIdMediaData, GetUmbracoManagementApiV1DocumentByIdMediaResponses, GetUmbracoManagementApiV1DocumentByIdMediaErrors, GetDocumentAreReferencedData, GetDocumentAreReferencedResponses, GetDocumentAreReferencedErrors, GetDocumentConfigurationData, GetDocumentConfigurationResponses, GetDocumentConfigurationErrors, PutDocumentSortData, PutDocumentSortResponses, PutDocumentSortErrors, GetDocumentUrlsData, GetDocumentUrlsResponses, GetDocumentUrlsErrors, PostDocumentValidateData, PostDocumentValidateResponses, PostDocumentValidateErrors, GetItemDocumentData, GetItemDocumentResponses, GetItemDocumentErrors, GetItemDocumentSearchData, GetItemDocumentSearchResponses, GetItemDocumentSearchErrors, DeleteRecycleBinDocumentData, DeleteRecycleBinDocumentResponses, DeleteRecycleBinDocumentErrors, DeleteRecycleBinDocumentByIdData, DeleteRecycleBinDocumentByIdResponses, DeleteRecycleBinDocumentByIdErrors, GetRecycleBinDocumentByIdOriginalParentData, GetRecycleBinDocumentByIdOriginalParentResponses, GetRecycleBinDocumentByIdOriginalParentErrors, PutRecycleBinDocumentByIdRestoreData, PutRecycleBinDocumentByIdRestoreResponses, PutRecycleBinDocumentByIdRestoreErrors, GetRecycleBinDocumentChildrenData, GetRecycleBinDocumentChildrenResponses, GetRecycleBinDocumentChildrenErrors, GetRecycleBinDocumentReferencedByData, GetRecycleBinDocumentReferencedByResponses, GetRecycleBinDocumentReferencedByErrors, GetRecycleBinDocumentRootData, GetRecycleBinDocumentRootResponses, GetRecycleBinDocumentRootErrors, GetTreeDocumentAncestorsData, GetTreeDocumentAncestorsResponses, GetTreeDocumentAncestorsErrors, GetTreeDocumentChildrenData, GetTreeDocumentChildrenResponses, GetTreeDocumentChildrenErrors, GetTreeDocumentRootData, GetTreeDocumentRootResponses, GetTreeDocumentRootErrors, PostDynamicRootQueryData, PostDynamicRootQueryResponses, PostDynamicRootQueryErrors, GetDynamicRootStepsData, GetDynamicRootStepsResponses, GetDynamicRootStepsErrors, GetHealthCheckGroupData, GetHealthCheckGroupResponses, GetHealthCheckGroupErrors, GetHealthCheckGroupByNameData, GetHealthCheckGroupByNameResponses, GetHealthCheckGroupByNameErrors, PostHealthCheckGroupByNameCheckData, PostHealthCheckGroupByNameCheckResponses, PostHealthCheckGroupByNameCheckErrors, PostHealthCheckExecuteActionData, PostHealthCheckExecuteActionResponses, PostHealthCheckExecuteActionErrors, GetHelpData, GetHelpResponses, GetHelpErrors, GetImagingResizeUrlsData, GetImagingResizeUrlsResponses, GetImagingResizeUrlsErrors, GetImportAnalyzeData, GetImportAnalyzeResponses, GetImportAnalyzeErrors, GetIndexerData, GetIndexerResponses, GetIndexerErrors, GetIndexerByIndexNameData, GetIndexerByIndexNameResponses, GetIndexerByIndexNameErrors, PostIndexerByIndexNameRebuildData, PostIndexerByIndexNameRebuildResponses, PostIndexerByIndexNameRebuildErrors, GetInstallSettingsData, GetInstallSettingsResponses, GetInstallSettingsErrors, PostInstallSetupData, PostInstallSetupResponses, PostInstallSetupErrors, PostInstallValidateDatabaseData, PostInstallValidateDatabaseResponses, PostInstallValidateDatabaseErrors, GetItemLanguageData, GetItemLanguageResponses, GetItemLanguageErrors, GetItemLanguageDefaultData, GetItemLanguageDefaultResponses, GetItemLanguageDefaultErrors, GetLanguageData, GetLanguageResponses, GetLanguageErrors, PostLanguageData, PostLanguageResponses, PostLanguageErrors, DeleteLanguageByIsoCodeData, DeleteLanguageByIsoCodeResponses, DeleteLanguageByIsoCodeErrors, GetLanguageByIsoCodeData, GetLanguageByIsoCodeResponses, GetLanguageByIsoCodeErrors, PutLanguageByIsoCodeData, PutLanguageByIsoCodeResponses, PutLanguageByIsoCodeErrors, GetLogViewerLevelData, GetLogViewerLevelResponses, GetLogViewerLevelErrors, GetLogViewerLevelCountData, GetLogViewerLevelCountResponses, GetLogViewerLevelCountErrors, GetLogViewerLogData, GetLogViewerLogResponses, GetLogViewerLogErrors, GetLogViewerMessageTemplateData, GetLogViewerMessageTemplateResponses, GetLogViewerMessageTemplateErrors, GetLogViewerSavedSearchData, GetLogViewerSavedSearchResponses, GetLogViewerSavedSearchErrors, PostLogViewerSavedSearchData, PostLogViewerSavedSearchResponses, PostLogViewerSavedSearchErrors, DeleteLogViewerSavedSearchByNameData, DeleteLogViewerSavedSearchByNameResponses, DeleteLogViewerSavedSearchByNameErrors, GetLogViewerSavedSearchByNameData, GetLogViewerSavedSearchByNameResponses, GetLogViewerSavedSearchByNameErrors, GetLogViewerValidateLogsSizeData, GetLogViewerValidateLogsSizeResponses, GetLogViewerValidateLogsSizeErrors, GetManifestManifestData, GetManifestManifestResponses, GetManifestManifestErrors, GetManifestManifestPrivateData, GetManifestManifestPrivateResponses, GetManifestManifestPrivateErrors, GetManifestManifestPublicData, GetManifestManifestPublicResponses, GetItemMediaTypeData, GetItemMediaTypeResponses, GetItemMediaTypeErrors, GetItemMediaTypeAllowedData, GetItemMediaTypeAllowedResponses, GetItemMediaTypeAllowedErrors, GetItemMediaTypeFoldersData, GetItemMediaTypeFoldersResponses, GetItemMediaTypeFoldersErrors, GetItemMediaTypeSearchData, GetItemMediaTypeSearchResponses, GetItemMediaTypeSearchErrors, PostMediaTypeData, PostMediaTypeResponses, PostMediaTypeErrors, DeleteMediaTypeByIdData, DeleteMediaTypeByIdResponses, DeleteMediaTypeByIdErrors, GetMediaTypeByIdData, GetMediaTypeByIdResponses, GetMediaTypeByIdErrors, PutMediaTypeByIdData, PutMediaTypeByIdResponses, PutMediaTypeByIdErrors, GetMediaTypeByIdAllowedChildrenData, GetMediaTypeByIdAllowedChildrenResponses, GetMediaTypeByIdAllowedChildrenErrors, GetMediaTypeByIdCompositionReferencesData, GetMediaTypeByIdCompositionReferencesResponses, GetMediaTypeByIdCompositionReferencesErrors, PostMediaTypeByIdCopyData, PostMediaTypeByIdCopyResponses, PostMediaTypeByIdCopyErrors, GetMediaTypeByIdExportData, GetMediaTypeByIdExportResponses, GetMediaTypeByIdExportErrors, PutMediaTypeByIdImportData, PutMediaTypeByIdImportResponses, PutMediaTypeByIdImportErrors, PutMediaTypeByIdMoveData, PutMediaTypeByIdMoveResponses, PutMediaTypeByIdMoveErrors, GetMediaTypeAllowedAtRootData, GetMediaTypeAllowedAtRootResponses, GetMediaTypeAllowedAtRootErrors, PostMediaTypeAvailableCompositionsData, PostMediaTypeAvailableCompositionsResponses, PostMediaTypeAvailableCompositionsErrors, GetMediaTypeConfigurationData, GetMediaTypeConfigurationResponses, GetMediaTypeConfigurationErrors, PostMediaTypeFolderData, PostMediaTypeFolderResponses, PostMediaTypeFolderErrors, DeleteMediaTypeFolderByIdData, DeleteMediaTypeFolderByIdResponses, DeleteMediaTypeFolderByIdErrors, GetMediaTypeFolderByIdData, GetMediaTypeFolderByIdResponses, GetMediaTypeFolderByIdErrors, PutMediaTypeFolderByIdData, PutMediaTypeFolderByIdResponses, PutMediaTypeFolderByIdErrors, PostMediaTypeImportData, PostMediaTypeImportResponses, PostMediaTypeImportErrors, GetTreeMediaTypeAncestorsData, GetTreeMediaTypeAncestorsResponses, GetTreeMediaTypeAncestorsErrors, GetTreeMediaTypeChildrenData, GetTreeMediaTypeChildrenResponses, GetTreeMediaTypeChildrenErrors, GetTreeMediaTypeRootData, GetTreeMediaTypeRootResponses, GetTreeMediaTypeRootErrors, GetCollectionMediaData, GetCollectionMediaResponses, GetCollectionMediaErrors, GetItemMediaData, GetItemMediaResponses, GetItemMediaErrors, GetItemMediaSearchData, GetItemMediaSearchResponses, GetItemMediaSearchErrors, PostMediaData, PostMediaResponses, PostMediaErrors, DeleteMediaByIdData, DeleteMediaByIdResponses, DeleteMediaByIdErrors, GetMediaByIdData, GetMediaByIdResponses, GetMediaByIdErrors, PutMediaByIdData, PutMediaByIdResponses, PutMediaByIdErrors, GetMediaByIdAuditLogData, GetMediaByIdAuditLogResponses, GetMediaByIdAuditLogErrors, PutMediaByIdMoveData, PutMediaByIdMoveResponses, PutMediaByIdMoveErrors, PutMediaByIdMoveToRecycleBinData, PutMediaByIdMoveToRecycleBinResponses, PutMediaByIdMoveToRecycleBinErrors, GetMediaByIdReferencedByData, GetMediaByIdReferencedByResponses, GetMediaByIdReferencedByErrors, GetMediaByIdReferencedDescendantsData, GetMediaByIdReferencedDescendantsResponses, GetMediaByIdReferencedDescendantsErrors, PutMediaByIdValidateData, PutMediaByIdValidateResponses, PutMediaByIdValidateErrors, GetMediaAreReferencedData, GetMediaAreReferencedResponses, GetMediaAreReferencedErrors, GetMediaConfigurationData, GetMediaConfigurationResponses, GetMediaConfigurationErrors, PutMediaSortData, PutMediaSortResponses, PutMediaSortErrors, GetMediaUrlsData, GetMediaUrlsResponses, GetMediaUrlsErrors, PostMediaValidateData, PostMediaValidateResponses, PostMediaValidateErrors, DeleteRecycleBinMediaData, DeleteRecycleBinMediaResponses, DeleteRecycleBinMediaErrors, DeleteRecycleBinMediaByIdData, DeleteRecycleBinMediaByIdResponses, DeleteRecycleBinMediaByIdErrors, GetRecycleBinMediaByIdOriginalParentData, GetRecycleBinMediaByIdOriginalParentResponses, GetRecycleBinMediaByIdOriginalParentErrors, PutRecycleBinMediaByIdRestoreData, PutRecycleBinMediaByIdRestoreResponses, PutRecycleBinMediaByIdRestoreErrors, GetRecycleBinMediaChildrenData, GetRecycleBinMediaChildrenResponses, GetRecycleBinMediaChildrenErrors, GetRecycleBinMediaReferencedByData, GetRecycleBinMediaReferencedByResponses, GetRecycleBinMediaReferencedByErrors, GetRecycleBinMediaRootData, GetRecycleBinMediaRootResponses, GetRecycleBinMediaRootErrors, GetTreeMediaAncestorsData, GetTreeMediaAncestorsResponses, GetTreeMediaAncestorsErrors, GetTreeMediaChildrenData, GetTreeMediaChildrenResponses, GetTreeMediaChildrenErrors, GetUmbracoManagementApiV1TreeMediaFoldersData, GetUmbracoManagementApiV1TreeMediaFoldersResponses, GetUmbracoManagementApiV1TreeMediaFoldersErrors, GetUmbracoManagementApiV11TreeMediaFoldersData, GetUmbracoManagementApiV11TreeMediaFoldersResponses, GetUmbracoManagementApiV11TreeMediaFoldersErrors, GetUmbracoManagementApiV2TreeMediaFoldersData, GetUmbracoManagementApiV2TreeMediaFoldersResponses, GetUmbracoManagementApiV2TreeMediaFoldersErrors, GetTreeMediaRootData, GetTreeMediaRootResponses, GetTreeMediaRootErrors, GetItemMemberGroupData, GetItemMemberGroupResponses, GetItemMemberGroupErrors, GetMemberGroupData, GetMemberGroupResponses, GetMemberGroupErrors, PostMemberGroupData, PostMemberGroupResponses, PostMemberGroupErrors, DeleteMemberGroupByIdData, DeleteMemberGroupByIdResponses, DeleteMemberGroupByIdErrors, GetMemberGroupByIdData, GetMemberGroupByIdResponses, GetMemberGroupByIdErrors, PutMemberGroupByIdData, PutMemberGroupByIdResponses, PutMemberGroupByIdErrors, GetTreeMemberGroupRootData, GetTreeMemberGroupRootResponses, GetTreeMemberGroupRootErrors, GetItemMemberTypeData, GetItemMemberTypeResponses, GetItemMemberTypeErrors, GetItemMemberTypeSearchData, GetItemMemberTypeSearchResponses, GetItemMemberTypeSearchErrors, PostMemberTypeData, PostMemberTypeResponses, PostMemberTypeErrors, DeleteMemberTypeByIdData, DeleteMemberTypeByIdResponses, DeleteMemberTypeByIdErrors, GetMemberTypeByIdData, GetMemberTypeByIdResponses, GetMemberTypeByIdErrors, PutMemberTypeByIdData, PutMemberTypeByIdResponses, PutMemberTypeByIdErrors, GetMemberTypeByIdCompositionReferencesData, GetMemberTypeByIdCompositionReferencesResponses, GetMemberTypeByIdCompositionReferencesErrors, PostMemberTypeByIdCopyData, PostMemberTypeByIdCopyResponses, PostMemberTypeByIdCopyErrors, PostMemberTypeAvailableCompositionsData, PostMemberTypeAvailableCompositionsResponses, PostMemberTypeAvailableCompositionsErrors, GetMemberTypeConfigurationData, GetMemberTypeConfigurationResponses, GetMemberTypeConfigurationErrors, GetTreeMemberTypeRootData, GetTreeMemberTypeRootResponses, GetTreeMemberTypeRootErrors, GetFilterMemberData, GetFilterMemberResponses, GetFilterMemberErrors, GetItemMemberData, GetItemMemberResponses, GetItemMemberErrors, GetItemMemberSearchData, GetItemMemberSearchResponses, GetItemMemberSearchErrors, PostMemberData, PostMemberResponses, PostMemberErrors, DeleteMemberByIdData, DeleteMemberByIdResponses, DeleteMemberByIdErrors, GetMemberByIdData, GetMemberByIdResponses, GetMemberByIdErrors, PutMemberByIdData, PutMemberByIdResponses, PutMemberByIdErrors, GetMemberByIdReferencedByData, GetMemberByIdReferencedByResponses, GetMemberByIdReferencedByErrors, GetMemberByIdReferencedDescendantsData, GetMemberByIdReferencedDescendantsResponses, GetMemberByIdReferencedDescendantsErrors, PutMemberByIdValidateData, PutMemberByIdValidateResponses, PutMemberByIdValidateErrors, GetMemberAreReferencedData, GetMemberAreReferencedResponses, GetMemberAreReferencedErrors, GetMemberConfigurationData, GetMemberConfigurationResponses, GetMemberConfigurationErrors, PostMemberValidateData, PostMemberValidateResponses, PostMemberValidateErrors, PostModelsBuilderBuildData, PostModelsBuilderBuildResponses, PostModelsBuilderBuildErrors, GetModelsBuilderDashboardData, GetModelsBuilderDashboardResponses, GetModelsBuilderDashboardErrors, GetModelsBuilderStatusData, GetModelsBuilderStatusResponses, GetModelsBuilderStatusErrors, GetObjectTypesData, GetObjectTypesResponses, GetObjectTypesErrors, GetOembedQueryData, GetOembedQueryResponses, GetOembedQueryErrors, PostPackageByNameRunMigrationData, PostPackageByNameRunMigrationResponses, PostPackageByNameRunMigrationErrors, GetPackageConfigurationData, GetPackageConfigurationResponses, GetPackageConfigurationErrors, GetPackageCreatedData, GetPackageCreatedResponses, GetPackageCreatedErrors, PostPackageCreatedData, PostPackageCreatedResponses, PostPackageCreatedErrors, DeletePackageCreatedByIdData, DeletePackageCreatedByIdResponses, DeletePackageCreatedByIdErrors, GetPackageCreatedByIdData, GetPackageCreatedByIdResponses, GetPackageCreatedByIdErrors, PutPackageCreatedByIdData, PutPackageCreatedByIdResponses, PutPackageCreatedByIdErrors, GetPackageCreatedByIdDownloadData, GetPackageCreatedByIdDownloadResponses, GetPackageCreatedByIdDownloadErrors, GetPackageMigrationStatusData, GetPackageMigrationStatusResponses, GetPackageMigrationStatusErrors, GetItemPartialViewData, GetItemPartialViewResponses, GetItemPartialViewErrors, PostPartialViewData, PostPartialViewResponses, PostPartialViewErrors, DeletePartialViewByPathData, DeletePartialViewByPathResponses, DeletePartialViewByPathErrors, GetPartialViewByPathData, GetPartialViewByPathResponses, GetPartialViewByPathErrors, PutPartialViewByPathData, PutPartialViewByPathResponses, PutPartialViewByPathErrors, PutPartialViewByPathRenameData, PutPartialViewByPathRenameResponses, PutPartialViewByPathRenameErrors, PostPartialViewFolderData, PostPartialViewFolderResponses, PostPartialViewFolderErrors, DeletePartialViewFolderByPathData, DeletePartialViewFolderByPathResponses, DeletePartialViewFolderByPathErrors, GetPartialViewFolderByPathData, GetPartialViewFolderByPathResponses, GetPartialViewFolderByPathErrors, GetPartialViewSnippetData, GetPartialViewSnippetResponses, GetPartialViewSnippetErrors, GetPartialViewSnippetByIdData, GetPartialViewSnippetByIdResponses, GetPartialViewSnippetByIdErrors, GetTreePartialViewAncestorsData, GetTreePartialViewAncestorsResponses, GetTreePartialViewAncestorsErrors, GetTreePartialViewChildrenData, GetTreePartialViewChildrenResponses, GetTreePartialViewChildrenErrors, GetTreePartialViewRootData, GetTreePartialViewRootResponses, GetTreePartialViewRootErrors, DeletePreviewData, DeletePreviewResponses, PostPreviewData, PostPreviewResponses, PostPreviewErrors, GetProfilingStatusData, GetProfilingStatusResponses, GetProfilingStatusErrors, PutProfilingStatusData, PutProfilingStatusResponses, PutProfilingStatusErrors, GetPropertyTypeIsUsedData, GetPropertyTypeIsUsedResponses, GetPropertyTypeIsUsedErrors, PostPublishedCacheRebuildData, PostPublishedCacheRebuildResponses, PostPublishedCacheRebuildErrors, GetPublishedCacheRebuildStatusData, GetPublishedCacheRebuildStatusResponses, GetPublishedCacheRebuildStatusErrors, PostPublishedCacheReloadData, PostPublishedCacheReloadResponses, PostPublishedCacheReloadErrors, GetRedirectManagementData, GetRedirectManagementResponses, GetRedirectManagementErrors, DeleteRedirectManagementByIdData, DeleteRedirectManagementByIdResponses, DeleteRedirectManagementByIdErrors, GetRedirectManagementByIdData, GetRedirectManagementByIdResponses, GetRedirectManagementByIdErrors, GetRedirectManagementStatusData, GetRedirectManagementStatusResponses, GetRedirectManagementStatusErrors, PostRedirectManagementStatusData, PostRedirectManagementStatusResponses, PostRedirectManagementStatusErrors, GetItemRelationTypeData, GetItemRelationTypeResponses, GetItemRelationTypeErrors, GetRelationTypeData, GetRelationTypeResponses, GetRelationTypeErrors, GetRelationTypeByIdData, GetRelationTypeByIdResponses, GetRelationTypeByIdErrors, GetRelationByRelationTypeIdData, GetRelationByRelationTypeIdResponses, GetRelationByRelationTypeIdErrors, GetItemScriptData, GetItemScriptResponses, GetItemScriptErrors, PostScriptData, PostScriptResponses, PostScriptErrors, DeleteScriptByPathData, DeleteScriptByPathResponses, DeleteScriptByPathErrors, GetScriptByPathData, GetScriptByPathResponses, GetScriptByPathErrors, PutScriptByPathData, PutScriptByPathResponses, PutScriptByPathErrors, PutScriptByPathRenameData, PutScriptByPathRenameResponses, PutScriptByPathRenameErrors, PostScriptFolderData, PostScriptFolderResponses, PostScriptFolderErrors, DeleteScriptFolderByPathData, DeleteScriptFolderByPathResponses, DeleteScriptFolderByPathErrors, GetScriptFolderByPathData, GetScriptFolderByPathResponses, GetScriptFolderByPathErrors, GetTreeScriptAncestorsData, GetTreeScriptAncestorsResponses, GetTreeScriptAncestorsErrors, GetTreeScriptChildrenData, GetTreeScriptChildrenResponses, GetTreeScriptChildrenErrors, GetTreeScriptRootData, GetTreeScriptRootResponses, GetTreeScriptRootErrors, GetSearcherData, GetSearcherResponses, GetSearcherErrors, GetSearcherBySearcherNameQueryData, GetSearcherBySearcherNameQueryResponses, GetSearcherBySearcherNameQueryErrors, GetSecurityConfigurationData, GetSecurityConfigurationResponses, GetSecurityConfigurationErrors, PostSecurityForgotPasswordData, PostSecurityForgotPasswordResponses, PostSecurityForgotPasswordErrors, PostSecurityForgotPasswordResetData, PostSecurityForgotPasswordResetResponses, PostSecurityForgotPasswordResetErrors, PostSecurityForgotPasswordVerifyData, PostSecurityForgotPasswordVerifyResponses, PostSecurityForgotPasswordVerifyErrors, GetSegmentData, GetSegmentResponses, GetSegmentErrors, GetServerConfigurationData, GetServerConfigurationResponses, GetServerInformationData, GetServerInformationResponses, GetServerInformationErrors, GetServerStatusData, GetServerStatusResponses, GetServerStatusErrors, GetServerTroubleshootingData, GetServerTroubleshootingResponses, GetServerTroubleshootingErrors, GetServerUpgradeCheckData, GetServerUpgradeCheckResponses, GetServerUpgradeCheckErrors, GetItemStaticFileData, GetItemStaticFileResponses, GetItemStaticFileErrors, GetTreeStaticFileAncestorsData, GetTreeStaticFileAncestorsResponses, GetTreeStaticFileAncestorsErrors, GetTreeStaticFileChildrenData, GetTreeStaticFileChildrenResponses, GetTreeStaticFileChildrenErrors, GetTreeStaticFileRootData, GetTreeStaticFileRootResponses, GetTreeStaticFileRootErrors, GetItemStylesheetData, GetItemStylesheetResponses, GetItemStylesheetErrors, PostStylesheetData, PostStylesheetResponses, PostStylesheetErrors, DeleteStylesheetByPathData, DeleteStylesheetByPathResponses, DeleteStylesheetByPathErrors, GetStylesheetByPathData, GetStylesheetByPathResponses, GetStylesheetByPathErrors, PutStylesheetByPathData, PutStylesheetByPathResponses, PutStylesheetByPathErrors, PutStylesheetByPathRenameData, PutStylesheetByPathRenameResponses, PutStylesheetByPathRenameErrors, PostStylesheetFolderData, PostStylesheetFolderResponses, PostStylesheetFolderErrors, DeleteStylesheetFolderByPathData, DeleteStylesheetFolderByPathResponses, DeleteStylesheetFolderByPathErrors, GetStylesheetFolderByPathData, GetStylesheetFolderByPathResponses, GetStylesheetFolderByPathErrors, GetTreeStylesheetAncestorsData, GetTreeStylesheetAncestorsResponses, GetTreeStylesheetAncestorsErrors, GetTreeStylesheetChildrenData, GetTreeStylesheetChildrenResponses, GetTreeStylesheetChildrenErrors, GetTreeStylesheetRootData, GetTreeStylesheetRootResponses, GetTreeStylesheetRootErrors, GetTagData, GetTagResponses, GetTagErrors, GetTelemetryData, GetTelemetryResponses, GetTelemetryErrors, GetTelemetryLevelData, GetTelemetryLevelResponses, GetTelemetryLevelErrors, PostTelemetryLevelData, PostTelemetryLevelResponses, PostTelemetryLevelErrors, GetItemTemplateData, GetItemTemplateResponses, GetItemTemplateErrors, GetItemTemplateSearchData, GetItemTemplateSearchResponses, GetItemTemplateSearchErrors, PostTemplateData, PostTemplateResponses, PostTemplateErrors, DeleteTemplateByIdData, DeleteTemplateByIdResponses, DeleteTemplateByIdErrors, GetTemplateByIdData, GetTemplateByIdResponses, GetTemplateByIdErrors, PutTemplateByIdData, PutTemplateByIdResponses, PutTemplateByIdErrors, GetTemplateConfigurationData, GetTemplateConfigurationResponses, GetTemplateConfigurationErrors, PostTemplateQueryExecuteData, PostTemplateQueryExecuteResponses, PostTemplateQueryExecuteErrors, GetTemplateQuerySettingsData, GetTemplateQuerySettingsResponses, GetTemplateQuerySettingsErrors, GetTreeTemplateAncestorsData, GetTreeTemplateAncestorsResponses, GetTreeTemplateAncestorsErrors, GetTreeTemplateChildrenData, GetTreeTemplateChildrenResponses, GetTreeTemplateChildrenErrors, GetTreeTemplateRootData, GetTreeTemplateRootResponses, GetTreeTemplateRootErrors, PostTemporaryFileData, PostTemporaryFileResponses, PostTemporaryFileErrors, DeleteTemporaryFileByIdData, DeleteTemporaryFileByIdResponses, DeleteTemporaryFileByIdErrors, GetTemporaryFileByIdData, GetTemporaryFileByIdResponses, GetTemporaryFileByIdErrors, GetTemporaryFileConfigurationData, GetTemporaryFileConfigurationResponses, GetTemporaryFileConfigurationErrors, PostUpgradeAuthorizeData, PostUpgradeAuthorizeResponses, PostUpgradeAuthorizeErrors, GetUpgradeSettingsData, GetUpgradeSettingsResponses, GetUpgradeSettingsErrors, GetUserDataData, GetUserDataResponses, GetUserDataErrors, PostUserDataData, PostUserDataResponses, PostUserDataErrors, PutUserDataData, PutUserDataResponses, PutUserDataErrors, GetUserDataByIdData, GetUserDataByIdResponses, GetUserDataByIdErrors, GetFilterUserGroupData, GetFilterUserGroupResponses, GetFilterUserGroupErrors, GetItemUserGroupData, GetItemUserGroupResponses, GetItemUserGroupErrors, DeleteUserGroupData, DeleteUserGroupResponses, DeleteUserGroupErrors, GetUserGroupData, GetUserGroupResponses, GetUserGroupErrors, PostUserGroupData, PostUserGroupResponses, PostUserGroupErrors, DeleteUserGroupByIdData, DeleteUserGroupByIdResponses, DeleteUserGroupByIdErrors, GetUserGroupByIdData, GetUserGroupByIdResponses, GetUserGroupByIdErrors, PutUserGroupByIdData, PutUserGroupByIdResponses, PutUserGroupByIdErrors, DeleteUserGroupByIdUsersData, DeleteUserGroupByIdUsersResponses, DeleteUserGroupByIdUsersErrors, PostUserGroupByIdUsersData, PostUserGroupByIdUsersResponses, PostUserGroupByIdUsersErrors, GetFilterUserData, GetFilterUserResponses, GetFilterUserErrors, GetItemUserData, GetItemUserResponses, GetItemUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, GetUserData, GetUserResponses, GetUserErrors, PostUserData, PostUserResponses, PostUserErrors, DeleteUserByIdData, DeleteUserByIdResponses, DeleteUserByIdErrors, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, PutUserByIdData, PutUserByIdResponses, PutUserByIdErrors, GetUserById2FaData, GetUserById2FaResponses, GetUserById2FaErrors, DeleteUserById2FaByProviderNameData, DeleteUserById2FaByProviderNameResponses, DeleteUserById2FaByProviderNameErrors, GetUserByIdCalculateStartNodesData, GetUserByIdCalculateStartNodesResponses, GetUserByIdCalculateStartNodesErrors, PostUserByIdChangePasswordData, PostUserByIdChangePasswordResponses, PostUserByIdChangePasswordErrors, GetUserByIdClientCredentialsData, GetUserByIdClientCredentialsResponses, GetUserByIdClientCredentialsErrors, PostUserByIdClientCredentialsData, PostUserByIdClientCredentialsResponses, PostUserByIdClientCredentialsErrors, DeleteUserByIdClientCredentialsByClientIdData, DeleteUserByIdClientCredentialsByClientIdResponses, DeleteUserByIdClientCredentialsByClientIdErrors, PostUserByIdResetPasswordData, PostUserByIdResetPasswordResponses, PostUserByIdResetPasswordErrors, DeleteUserAvatarByIdData, DeleteUserAvatarByIdResponses, DeleteUserAvatarByIdErrors, PostUserAvatarByIdData, PostUserAvatarByIdResponses, PostUserAvatarByIdErrors, GetUserConfigurationData, GetUserConfigurationResponses, GetUserConfigurationErrors, GetUserCurrentData, GetUserCurrentResponses, GetUserCurrentErrors, GetUserCurrent2FaData, GetUserCurrent2FaResponses, GetUserCurrent2FaErrors, DeleteUserCurrent2FaByProviderNameData, DeleteUserCurrent2FaByProviderNameResponses, DeleteUserCurrent2FaByProviderNameErrors, GetUserCurrent2FaByProviderNameData, GetUserCurrent2FaByProviderNameResponses, GetUserCurrent2FaByProviderNameErrors, PostUserCurrent2FaByProviderNameData, PostUserCurrent2FaByProviderNameResponses, PostUserCurrent2FaByProviderNameErrors, PostUserCurrentAvatarData, PostUserCurrentAvatarResponses, PostUserCurrentAvatarErrors, PostUserCurrentChangePasswordData, PostUserCurrentChangePasswordResponses, PostUserCurrentChangePasswordErrors, GetUserCurrentConfigurationData, GetUserCurrentConfigurationResponses, GetUserCurrentConfigurationErrors, GetUserCurrentLoginProvidersData, GetUserCurrentLoginProvidersResponses, GetUserCurrentLoginProvidersErrors, GetUserCurrentPermissionsData, GetUserCurrentPermissionsResponses, GetUserCurrentPermissionsErrors, GetUserCurrentPermissionsDocumentData, GetUserCurrentPermissionsDocumentResponses, GetUserCurrentPermissionsDocumentErrors, GetUserCurrentPermissionsMediaData, GetUserCurrentPermissionsMediaResponses, GetUserCurrentPermissionsMediaErrors, PostUserDisableData, PostUserDisableResponses, PostUserDisableErrors, PostUserEnableData, PostUserEnableResponses, PostUserEnableErrors, PostUserInviteData, PostUserInviteResponses, PostUserInviteErrors, PostUserInviteCreatePasswordData, PostUserInviteCreatePasswordResponses, PostUserInviteCreatePasswordErrors, PostUserInviteResendData, PostUserInviteResendResponses, PostUserInviteResendErrors, PostUserInviteVerifyData, PostUserInviteVerifyResponses, PostUserInviteVerifyErrors, PostUserSetUserGroupsData, PostUserSetUserGroupsResponses, PostUserSetUserGroupsErrors, PostUserUnlockData, PostUserUnlockResponses, PostUserUnlockErrors, GetItemWebhookData, GetItemWebhookResponses, GetItemWebhookErrors, GetWebhookData, GetWebhookResponses, GetWebhookErrors, PostWebhookData, PostWebhookResponses, PostWebhookErrors, DeleteWebhookByIdData, DeleteWebhookByIdResponses, DeleteWebhookByIdErrors, GetWebhookByIdData, GetWebhookByIdResponses, GetWebhookByIdErrors, PutWebhookByIdData, PutWebhookByIdResponses, PutWebhookByIdErrors, GetWebhookByIdLogsData, GetWebhookByIdLogsResponses, GetWebhookByIdLogsErrors, GetWebhookEventsData, GetWebhookEventsResponses, GetWebhookEventsErrors, GetWebhookLogsData, GetWebhookLogsResponses, GetWebhookLogsErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getCulture = <ThrowOnError extends boolean = false>(options?: Options<GetCultureData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCultureResponses, GetCultureErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/culture',
        ...options
    });
};

export const postDataType = <ThrowOnError extends boolean = false>(options?: Options<PostDataTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDataTypeResponses, PostDataTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteDataTypeById = <ThrowOnError extends boolean = false>(options: Options<DeleteDataTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDataTypeByIdResponses, DeleteDataTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/{id}',
        ...options
    });
};

export const getDataTypeById = <ThrowOnError extends boolean = false>(options: Options<GetDataTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDataTypeByIdResponses, GetDataTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/{id}',
        ...options
    });
};

export const putDataTypeById = <ThrowOnError extends boolean = false>(options: Options<PutDataTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDataTypeByIdResponses, PutDataTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postDataTypeByIdCopy = <ThrowOnError extends boolean = false>(options: Options<PostDataTypeByIdCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostDataTypeByIdCopyResponses, PostDataTypeByIdCopyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/{id}/copy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDataTypeByIdIsUsed = <ThrowOnError extends boolean = false>(options: Options<GetDataTypeByIdIsUsedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDataTypeByIdIsUsedResponses, GetDataTypeByIdIsUsedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/{id}/is-used',
        ...options
    });
};

export const putDataTypeByIdMove = <ThrowOnError extends boolean = false>(options: Options<PutDataTypeByIdMoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDataTypeByIdMoveResponses, PutDataTypeByIdMoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/{id}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDataTypeByIdReferencedBy = <ThrowOnError extends boolean = false>(options: Options<GetDataTypeByIdReferencedByData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDataTypeByIdReferencedByResponses, GetDataTypeByIdReferencedByErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/{id}/referenced-by',
        ...options
    });
};

/**
 * @deprecated
 */
export const getDataTypeByIdReferences = <ThrowOnError extends boolean = false>(options: Options<GetDataTypeByIdReferencesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDataTypeByIdReferencesResponses, GetDataTypeByIdReferencesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/{id}/references',
        ...options
    });
};

export const getDataTypeConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetDataTypeConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDataTypeConfigurationResponses, GetDataTypeConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/configuration',
        ...options
    });
};

export const postDataTypeFolder = <ThrowOnError extends boolean = false>(options?: Options<PostDataTypeFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDataTypeFolderResponses, PostDataTypeFolderErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/folder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteDataTypeFolderById = <ThrowOnError extends boolean = false>(options: Options<DeleteDataTypeFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDataTypeFolderByIdResponses, DeleteDataTypeFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/folder/{id}',
        ...options
    });
};

export const getDataTypeFolderById = <ThrowOnError extends boolean = false>(options: Options<GetDataTypeFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDataTypeFolderByIdResponses, GetDataTypeFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/folder/{id}',
        ...options
    });
};

export const putDataTypeFolderById = <ThrowOnError extends boolean = false>(options: Options<PutDataTypeFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDataTypeFolderByIdResponses, PutDataTypeFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/data-type/folder/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getFilterDataType = <ThrowOnError extends boolean = false>(options?: Options<GetFilterDataTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFilterDataTypeResponses, GetFilterDataTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/filter/data-type',
        ...options
    });
};

export const getItemDataType = <ThrowOnError extends boolean = false>(options?: Options<GetItemDataTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemDataTypeResponses, GetItemDataTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/data-type',
        ...options
    });
};

export const getItemDataTypeSearch = <ThrowOnError extends boolean = false>(options?: Options<GetItemDataTypeSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemDataTypeSearchResponses, GetItemDataTypeSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/data-type/search',
        ...options
    });
};

export const getTreeDataTypeAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDataTypeAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDataTypeAncestorsResponses, GetTreeDataTypeAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/data-type/ancestors',
        ...options
    });
};

export const getTreeDataTypeChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDataTypeChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDataTypeChildrenResponses, GetTreeDataTypeChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/data-type/children',
        ...options
    });
};

export const getTreeDataTypeRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDataTypeRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDataTypeRootResponses, GetTreeDataTypeRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/data-type/root',
        ...options
    });
};

export const getDictionary = <ThrowOnError extends boolean = false>(options?: Options<GetDictionaryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDictionaryResponses, GetDictionaryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/dictionary',
        ...options
    });
};

export const postDictionary = <ThrowOnError extends boolean = false>(options?: Options<PostDictionaryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDictionaryResponses, PostDictionaryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/dictionary',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteDictionaryById = <ThrowOnError extends boolean = false>(options: Options<DeleteDictionaryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDictionaryByIdResponses, DeleteDictionaryByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/dictionary/{id}',
        ...options
    });
};

export const getDictionaryById = <ThrowOnError extends boolean = false>(options: Options<GetDictionaryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDictionaryByIdResponses, GetDictionaryByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/dictionary/{id}',
        ...options
    });
};

export const putDictionaryById = <ThrowOnError extends boolean = false>(options: Options<PutDictionaryByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDictionaryByIdResponses, PutDictionaryByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/dictionary/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDictionaryByIdExport = <ThrowOnError extends boolean = false>(options: Options<GetDictionaryByIdExportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDictionaryByIdExportResponses, GetDictionaryByIdExportErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/dictionary/{id}/export',
        ...options
    });
};

export const putDictionaryByIdMove = <ThrowOnError extends boolean = false>(options: Options<PutDictionaryByIdMoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDictionaryByIdMoveResponses, PutDictionaryByIdMoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/dictionary/{id}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postDictionaryImport = <ThrowOnError extends boolean = false>(options?: Options<PostDictionaryImportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDictionaryImportResponses, PostDictionaryImportErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/dictionary/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getItemDictionary = <ThrowOnError extends boolean = false>(options?: Options<GetItemDictionaryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemDictionaryResponses, GetItemDictionaryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/dictionary',
        ...options
    });
};

export const getTreeDictionaryAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDictionaryAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDictionaryAncestorsResponses, GetTreeDictionaryAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/dictionary/ancestors',
        ...options
    });
};

export const getTreeDictionaryChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDictionaryChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDictionaryChildrenResponses, GetTreeDictionaryChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/dictionary/children',
        ...options
    });
};

export const getTreeDictionaryRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDictionaryRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDictionaryRootResponses, GetTreeDictionaryRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/dictionary/root',
        ...options
    });
};

export const postDocumentBlueprint = <ThrowOnError extends boolean = false>(options?: Options<PostDocumentBlueprintData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDocumentBlueprintResponses, PostDocumentBlueprintErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteDocumentBlueprintById = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentBlueprintByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentBlueprintByIdResponses, DeleteDocumentBlueprintByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint/{id}',
        ...options
    });
};

export const getDocumentBlueprintById = <ThrowOnError extends boolean = false>(options: Options<GetDocumentBlueprintByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentBlueprintByIdResponses, GetDocumentBlueprintByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint/{id}',
        ...options
    });
};

export const putDocumentBlueprintById = <ThrowOnError extends boolean = false>(options: Options<PutDocumentBlueprintByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentBlueprintByIdResponses, PutDocumentBlueprintByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putDocumentBlueprintByIdMove = <ThrowOnError extends boolean = false>(options: Options<PutDocumentBlueprintByIdMoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentBlueprintByIdMoveResponses, PutDocumentBlueprintByIdMoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint/{id}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDocumentBlueprintByIdScaffold = <ThrowOnError extends boolean = false>(options: Options<GetDocumentBlueprintByIdScaffoldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentBlueprintByIdScaffoldResponses, GetDocumentBlueprintByIdScaffoldErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint/{id}/scaffold',
        ...options
    });
};

export const postDocumentBlueprintFolder = <ThrowOnError extends boolean = false>(options?: Options<PostDocumentBlueprintFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDocumentBlueprintFolderResponses, PostDocumentBlueprintFolderErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint/folder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteDocumentBlueprintFolderById = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentBlueprintFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentBlueprintFolderByIdResponses, DeleteDocumentBlueprintFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
        ...options
    });
};

export const getDocumentBlueprintFolderById = <ThrowOnError extends boolean = false>(options: Options<GetDocumentBlueprintFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentBlueprintFolderByIdResponses, GetDocumentBlueprintFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
        ...options
    });
};

export const putDocumentBlueprintFolderById = <ThrowOnError extends boolean = false>(options: Options<PutDocumentBlueprintFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentBlueprintFolderByIdResponses, PutDocumentBlueprintFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postDocumentBlueprintFromDocument = <ThrowOnError extends boolean = false>(options?: Options<PostDocumentBlueprintFromDocumentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDocumentBlueprintFromDocumentResponses, PostDocumentBlueprintFromDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-blueprint/from-document',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getItemDocumentBlueprint = <ThrowOnError extends boolean = false>(options?: Options<GetItemDocumentBlueprintData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemDocumentBlueprintResponses, GetItemDocumentBlueprintErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/document-blueprint',
        ...options
    });
};

export const getTreeDocumentBlueprintAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDocumentBlueprintAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDocumentBlueprintAncestorsResponses, GetTreeDocumentBlueprintAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/document-blueprint/ancestors',
        ...options
    });
};

export const getTreeDocumentBlueprintChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDocumentBlueprintChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDocumentBlueprintChildrenResponses, GetTreeDocumentBlueprintChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/document-blueprint/children',
        ...options
    });
};

export const getTreeDocumentBlueprintRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDocumentBlueprintRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDocumentBlueprintRootResponses, GetTreeDocumentBlueprintRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/document-blueprint/root',
        ...options
    });
};

export const postDocumentType = <ThrowOnError extends boolean = false>(options?: Options<PostDocumentTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDocumentTypeResponses, PostDocumentTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteDocumentTypeById = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentTypeByIdResponses, DeleteDocumentTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/{id}',
        ...options
    });
};

export const getDocumentTypeById = <ThrowOnError extends boolean = false>(options: Options<GetDocumentTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdResponses, GetDocumentTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/{id}',
        ...options
    });
};

export const putDocumentTypeById = <ThrowOnError extends boolean = false>(options: Options<PutDocumentTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentTypeByIdResponses, PutDocumentTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDocumentTypeByIdAllowedChildren = <ThrowOnError extends boolean = false>(options: Options<GetDocumentTypeByIdAllowedChildrenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdAllowedChildrenResponses, GetDocumentTypeByIdAllowedChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/{id}/allowed-children',
        ...options
    });
};

export const getDocumentTypeByIdBlueprint = <ThrowOnError extends boolean = false>(options: Options<GetDocumentTypeByIdBlueprintData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdBlueprintResponses, GetDocumentTypeByIdBlueprintErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/{id}/blueprint',
        ...options
    });
};

export const getDocumentTypeByIdCompositionReferences = <ThrowOnError extends boolean = false>(options: Options<GetDocumentTypeByIdCompositionReferencesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdCompositionReferencesResponses, GetDocumentTypeByIdCompositionReferencesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/{id}/composition-references',
        ...options
    });
};

export const postDocumentTypeByIdCopy = <ThrowOnError extends boolean = false>(options: Options<PostDocumentTypeByIdCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostDocumentTypeByIdCopyResponses, PostDocumentTypeByIdCopyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/{id}/copy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDocumentTypeByIdExport = <ThrowOnError extends boolean = false>(options: Options<GetDocumentTypeByIdExportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdExportResponses, GetDocumentTypeByIdExportErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/{id}/export',
        ...options
    });
};

export const putDocumentTypeByIdImport = <ThrowOnError extends boolean = false>(options: Options<PutDocumentTypeByIdImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentTypeByIdImportResponses, PutDocumentTypeByIdImportErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/{id}/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putDocumentTypeByIdMove = <ThrowOnError extends boolean = false>(options: Options<PutDocumentTypeByIdMoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentTypeByIdMoveResponses, PutDocumentTypeByIdMoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/{id}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDocumentTypeAllowedAtRoot = <ThrowOnError extends boolean = false>(options?: Options<GetDocumentTypeAllowedAtRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDocumentTypeAllowedAtRootResponses, GetDocumentTypeAllowedAtRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/allowed-at-root',
        ...options
    });
};

export const postDocumentTypeAvailableCompositions = <ThrowOnError extends boolean = false>(options?: Options<PostDocumentTypeAvailableCompositionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDocumentTypeAvailableCompositionsResponses, PostDocumentTypeAvailableCompositionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/available-compositions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getDocumentTypeConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetDocumentTypeConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDocumentTypeConfigurationResponses, GetDocumentTypeConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/configuration',
        ...options
    });
};

export const postDocumentTypeFolder = <ThrowOnError extends boolean = false>(options?: Options<PostDocumentTypeFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDocumentTypeFolderResponses, PostDocumentTypeFolderErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/folder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteDocumentTypeFolderById = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentTypeFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentTypeFolderByIdResponses, DeleteDocumentTypeFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/folder/{id}',
        ...options
    });
};

export const getDocumentTypeFolderById = <ThrowOnError extends boolean = false>(options: Options<GetDocumentTypeFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentTypeFolderByIdResponses, GetDocumentTypeFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/folder/{id}',
        ...options
    });
};

export const putDocumentTypeFolderById = <ThrowOnError extends boolean = false>(options: Options<PutDocumentTypeFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentTypeFolderByIdResponses, PutDocumentTypeFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/folder/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postDocumentTypeImport = <ThrowOnError extends boolean = false>(options?: Options<PostDocumentTypeImportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDocumentTypeImportResponses, PostDocumentTypeImportErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-type/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getItemDocumentType = <ThrowOnError extends boolean = false>(options?: Options<GetItemDocumentTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemDocumentTypeResponses, GetItemDocumentTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/document-type',
        ...options
    });
};

export const getItemDocumentTypeSearch = <ThrowOnError extends boolean = false>(options?: Options<GetItemDocumentTypeSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemDocumentTypeSearchResponses, GetItemDocumentTypeSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/document-type/search',
        ...options
    });
};

export const getTreeDocumentTypeAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDocumentTypeAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDocumentTypeAncestorsResponses, GetTreeDocumentTypeAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/document-type/ancestors',
        ...options
    });
};

export const getTreeDocumentTypeChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDocumentTypeChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDocumentTypeChildrenResponses, GetTreeDocumentTypeChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/document-type/children',
        ...options
    });
};

export const getTreeDocumentTypeRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDocumentTypeRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDocumentTypeRootResponses, GetTreeDocumentTypeRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/document-type/root',
        ...options
    });
};

export const getDocumentVersion = <ThrowOnError extends boolean = false>(options: Options<GetDocumentVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentVersionResponses, GetDocumentVersionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-version',
        ...options
    });
};

export const getDocumentVersionById = <ThrowOnError extends boolean = false>(options: Options<GetDocumentVersionByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentVersionByIdResponses, GetDocumentVersionByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-version/{id}',
        ...options
    });
};

export const putDocumentVersionByIdPreventCleanup = <ThrowOnError extends boolean = false>(options: Options<PutDocumentVersionByIdPreventCleanupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentVersionByIdPreventCleanupResponses, PutDocumentVersionByIdPreventCleanupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-version/{id}/prevent-cleanup',
        ...options
    });
};

export const postDocumentVersionByIdRollback = <ThrowOnError extends boolean = false>(options: Options<PostDocumentVersionByIdRollbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostDocumentVersionByIdRollbackResponses, PostDocumentVersionByIdRollbackErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document-version/{id}/rollback',
        ...options
    });
};

export const getCollectionDocumentById = <ThrowOnError extends boolean = false>(options: Options<GetCollectionDocumentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCollectionDocumentByIdResponses, GetCollectionDocumentByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/collection/document/{id}',
        ...options
    });
};

export const postDocument = <ThrowOnError extends boolean = false>(options?: Options<PostDocumentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDocumentResponses, PostDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteDocumentById = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentByIdResponses, DeleteDocumentByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}',
        ...options
    });
};

export const getDocumentById = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdResponses, GetDocumentByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}',
        ...options
    });
};

export const putDocumentById = <ThrowOnError extends boolean = false>(options: Options<PutDocumentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentByIdResponses, PutDocumentByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDocumentByIdAuditLog = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdAuditLogData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdAuditLogResponses, GetDocumentByIdAuditLogErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/audit-log',
        ...options
    });
};

export const postDocumentByIdCopy = <ThrowOnError extends boolean = false>(options: Options<PostDocumentByIdCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostDocumentByIdCopyResponses, PostDocumentByIdCopyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/copy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDocumentByIdDomains = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdDomainsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdDomainsResponses, GetDocumentByIdDomainsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/domains',
        ...options
    });
};

export const putDocumentByIdDomains = <ThrowOnError extends boolean = false>(options: Options<PutDocumentByIdDomainsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentByIdDomainsResponses, PutDocumentByIdDomainsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/domains',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putDocumentByIdMove = <ThrowOnError extends boolean = false>(options: Options<PutDocumentByIdMoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentByIdMoveResponses, PutDocumentByIdMoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putDocumentByIdMoveToRecycleBin = <ThrowOnError extends boolean = false>(options: Options<PutDocumentByIdMoveToRecycleBinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentByIdMoveToRecycleBinResponses, PutDocumentByIdMoveToRecycleBinErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/move-to-recycle-bin',
        ...options
    });
};

export const getDocumentByIdNotifications = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdNotificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdNotificationsResponses, GetDocumentByIdNotificationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/notifications',
        ...options
    });
};

export const putDocumentByIdNotifications = <ThrowOnError extends boolean = false>(options: Options<PutDocumentByIdNotificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentByIdNotificationsResponses, PutDocumentByIdNotificationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/notifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteDocumentByIdPublicAccess = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentByIdPublicAccessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentByIdPublicAccessResponses, DeleteDocumentByIdPublicAccessErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/public-access',
        ...options
    });
};

export const getDocumentByIdPublicAccess = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdPublicAccessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdPublicAccessResponses, GetDocumentByIdPublicAccessErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/public-access',
        ...options
    });
};

export const postDocumentByIdPublicAccess = <ThrowOnError extends boolean = false>(options: Options<PostDocumentByIdPublicAccessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostDocumentByIdPublicAccessResponses, PostDocumentByIdPublicAccessErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/public-access',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putDocumentByIdPublicAccess = <ThrowOnError extends boolean = false>(options: Options<PutDocumentByIdPublicAccessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentByIdPublicAccessResponses, PutDocumentByIdPublicAccessErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/public-access',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putDocumentByIdPublish = <ThrowOnError extends boolean = false>(options: Options<PutDocumentByIdPublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentByIdPublishResponses, PutDocumentByIdPublishErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/publish',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putDocumentByIdPublishWithDescendants = <ThrowOnError extends boolean = false>(options: Options<PutDocumentByIdPublishWithDescendantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentByIdPublishWithDescendantsResponses, PutDocumentByIdPublishWithDescendantsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getDocumentByIdPublishWithDescendantsResultByTaskId = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdPublishWithDescendantsResultByTaskIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdPublishWithDescendantsResultByTaskIdResponses, GetDocumentByIdPublishWithDescendantsResultByTaskIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants/result/{taskId}',
        ...options
    });
};

export const getDocumentByIdPublished = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdPublishedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdPublishedResponses, GetDocumentByIdPublishedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/published',
        ...options
    });
};

export const getDocumentByIdReferencedBy = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdReferencedByData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdReferencedByResponses, GetDocumentByIdReferencedByErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/referenced-by',
        ...options
    });
};

export const getDocumentByIdReferencedDescendants = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdReferencedDescendantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdReferencedDescendantsResponses, GetDocumentByIdReferencedDescendantsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/referenced-descendants',
        ...options
    });
};

export const putDocumentByIdUnpublish = <ThrowOnError extends boolean = false>(options: Options<PutDocumentByIdUnpublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutDocumentByIdUnpublishResponses, PutDocumentByIdUnpublishErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/unpublish',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putUmbracoManagementApiV11DocumentByIdValidate11 = <ThrowOnError extends boolean = false>(options: Options<PutUmbracoManagementApiV11DocumentByIdValidate11Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUmbracoManagementApiV11DocumentByIdValidate11Responses, PutUmbracoManagementApiV11DocumentByIdValidate11Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1.1/document/{id}/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUmbracoManagementApiV1DocumentByIdMedia = <ThrowOnError extends boolean = false>(options: Options<GetUmbracoManagementApiV1DocumentByIdMediaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUmbracoManagementApiV1DocumentByIdMediaResponses, GetUmbracoManagementApiV1DocumentByIdMediaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/{id}/media',
        ...options
    });
};

export const getDocumentAreReferenced = <ThrowOnError extends boolean = false>(options?: Options<GetDocumentAreReferencedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDocumentAreReferencedResponses, GetDocumentAreReferencedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/are-referenced',
        ...options
    });
};

export const getDocumentConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetDocumentConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDocumentConfigurationResponses, GetDocumentConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/configuration',
        ...options
    });
};

export const putDocumentSort = <ThrowOnError extends boolean = false>(options?: Options<PutDocumentSortData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutDocumentSortResponses, PutDocumentSortErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/sort',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getDocumentUrls = <ThrowOnError extends boolean = false>(options?: Options<GetDocumentUrlsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDocumentUrlsResponses, GetDocumentUrlsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/urls',
        ...options
    });
};

export const postDocumentValidate = <ThrowOnError extends boolean = false>(options?: Options<PostDocumentValidateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDocumentValidateResponses, PostDocumentValidateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/document/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getItemDocument = <ThrowOnError extends boolean = false>(options?: Options<GetItemDocumentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemDocumentResponses, GetItemDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/document',
        ...options
    });
};

export const getItemDocumentSearch = <ThrowOnError extends boolean = false>(options?: Options<GetItemDocumentSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemDocumentSearchResponses, GetItemDocumentSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/document/search',
        ...options
    });
};

export const deleteRecycleBinDocument = <ThrowOnError extends boolean = false>(options?: Options<DeleteRecycleBinDocumentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteRecycleBinDocumentResponses, DeleteRecycleBinDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/document',
        ...options
    });
};

export const deleteRecycleBinDocumentById = <ThrowOnError extends boolean = false>(options: Options<DeleteRecycleBinDocumentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRecycleBinDocumentByIdResponses, DeleteRecycleBinDocumentByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/document/{id}',
        ...options
    });
};

export const getRecycleBinDocumentByIdOriginalParent = <ThrowOnError extends boolean = false>(options: Options<GetRecycleBinDocumentByIdOriginalParentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRecycleBinDocumentByIdOriginalParentResponses, GetRecycleBinDocumentByIdOriginalParentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent',
        ...options
    });
};

export const putRecycleBinDocumentByIdRestore = <ThrowOnError extends boolean = false>(options: Options<PutRecycleBinDocumentByIdRestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutRecycleBinDocumentByIdRestoreResponses, PutRecycleBinDocumentByIdRestoreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/document/{id}/restore',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getRecycleBinDocumentChildren = <ThrowOnError extends boolean = false>(options?: Options<GetRecycleBinDocumentChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecycleBinDocumentChildrenResponses, GetRecycleBinDocumentChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/document/children',
        ...options
    });
};

export const getRecycleBinDocumentReferencedBy = <ThrowOnError extends boolean = false>(options?: Options<GetRecycleBinDocumentReferencedByData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecycleBinDocumentReferencedByResponses, GetRecycleBinDocumentReferencedByErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/document/referenced-by',
        ...options
    });
};

export const getRecycleBinDocumentRoot = <ThrowOnError extends boolean = false>(options?: Options<GetRecycleBinDocumentRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecycleBinDocumentRootResponses, GetRecycleBinDocumentRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/document/root',
        ...options
    });
};

export const getTreeDocumentAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDocumentAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDocumentAncestorsResponses, GetTreeDocumentAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/document/ancestors',
        ...options
    });
};

export const getTreeDocumentChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDocumentChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDocumentChildrenResponses, GetTreeDocumentChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/document/children',
        ...options
    });
};

export const getTreeDocumentRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeDocumentRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeDocumentRootResponses, GetTreeDocumentRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/document/root',
        ...options
    });
};

export const postDynamicRootQuery = <ThrowOnError extends boolean = false>(options?: Options<PostDynamicRootQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostDynamicRootQueryResponses, PostDynamicRootQueryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/dynamic-root/query',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getDynamicRootSteps = <ThrowOnError extends boolean = false>(options?: Options<GetDynamicRootStepsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDynamicRootStepsResponses, GetDynamicRootStepsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/dynamic-root/steps',
        ...options
    });
};

export const getHealthCheckGroup = <ThrowOnError extends boolean = false>(options?: Options<GetHealthCheckGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthCheckGroupResponses, GetHealthCheckGroupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/health-check-group',
        ...options
    });
};

export const getHealthCheckGroupByName = <ThrowOnError extends boolean = false>(options: Options<GetHealthCheckGroupByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHealthCheckGroupByNameResponses, GetHealthCheckGroupByNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/health-check-group/{name}',
        ...options
    });
};

export const postHealthCheckGroupByNameCheck = <ThrowOnError extends boolean = false>(options: Options<PostHealthCheckGroupByNameCheckData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostHealthCheckGroupByNameCheckResponses, PostHealthCheckGroupByNameCheckErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/health-check-group/{name}/check',
        ...options
    });
};

export const postHealthCheckExecuteAction = <ThrowOnError extends boolean = false>(options?: Options<PostHealthCheckExecuteActionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostHealthCheckExecuteActionResponses, PostHealthCheckExecuteActionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/health-check/execute-action',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getHelp = <ThrowOnError extends boolean = false>(options?: Options<GetHelpData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHelpResponses, GetHelpErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/help',
        ...options
    });
};

export const getImagingResizeUrls = <ThrowOnError extends boolean = false>(options?: Options<GetImagingResizeUrlsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetImagingResizeUrlsResponses, GetImagingResizeUrlsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/imaging/resize/urls',
        ...options
    });
};

export const getImportAnalyze = <ThrowOnError extends boolean = false>(options?: Options<GetImportAnalyzeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetImportAnalyzeResponses, GetImportAnalyzeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/import/analyze',
        ...options
    });
};

export const getIndexer = <ThrowOnError extends boolean = false>(options?: Options<GetIndexerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetIndexerResponses, GetIndexerErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/indexer',
        ...options
    });
};

export const getIndexerByIndexName = <ThrowOnError extends boolean = false>(options: Options<GetIndexerByIndexNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIndexerByIndexNameResponses, GetIndexerByIndexNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/indexer/{indexName}',
        ...options
    });
};

export const postIndexerByIndexNameRebuild = <ThrowOnError extends boolean = false>(options: Options<PostIndexerByIndexNameRebuildData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostIndexerByIndexNameRebuildResponses, PostIndexerByIndexNameRebuildErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/indexer/{indexName}/rebuild',
        ...options
    });
};

export const getInstallSettings = <ThrowOnError extends boolean = false>(options?: Options<GetInstallSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetInstallSettingsResponses, GetInstallSettingsErrors, ThrowOnError>({
        url: '/umbraco/management/api/v1/install/settings',
        ...options
    });
};

export const postInstallSetup = <ThrowOnError extends boolean = false>(options?: Options<PostInstallSetupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostInstallSetupResponses, PostInstallSetupErrors, ThrowOnError>({
        url: '/umbraco/management/api/v1/install/setup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postInstallValidateDatabase = <ThrowOnError extends boolean = false>(options?: Options<PostInstallValidateDatabaseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostInstallValidateDatabaseResponses, PostInstallValidateDatabaseErrors, ThrowOnError>({
        url: '/umbraco/management/api/v1/install/validate-database',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getItemLanguage = <ThrowOnError extends boolean = false>(options?: Options<GetItemLanguageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemLanguageResponses, GetItemLanguageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/language',
        ...options
    });
};

export const getItemLanguageDefault = <ThrowOnError extends boolean = false>(options?: Options<GetItemLanguageDefaultData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemLanguageDefaultResponses, GetItemLanguageDefaultErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/language/default',
        ...options
    });
};

export const getLanguage = <ThrowOnError extends boolean = false>(options?: Options<GetLanguageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLanguageResponses, GetLanguageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/language',
        ...options
    });
};

export const postLanguage = <ThrowOnError extends boolean = false>(options?: Options<PostLanguageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostLanguageResponses, PostLanguageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/language',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteLanguageByIsoCode = <ThrowOnError extends boolean = false>(options: Options<DeleteLanguageByIsoCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLanguageByIsoCodeResponses, DeleteLanguageByIsoCodeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/language/{isoCode}',
        ...options
    });
};

export const getLanguageByIsoCode = <ThrowOnError extends boolean = false>(options: Options<GetLanguageByIsoCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLanguageByIsoCodeResponses, GetLanguageByIsoCodeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/language/{isoCode}',
        ...options
    });
};

export const putLanguageByIsoCode = <ThrowOnError extends boolean = false>(options: Options<PutLanguageByIsoCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutLanguageByIsoCodeResponses, PutLanguageByIsoCodeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/language/{isoCode}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getLogViewerLevel = <ThrowOnError extends boolean = false>(options?: Options<GetLogViewerLevelData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLogViewerLevelResponses, GetLogViewerLevelErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/log-viewer/level',
        ...options
    });
};

export const getLogViewerLevelCount = <ThrowOnError extends boolean = false>(options?: Options<GetLogViewerLevelCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLogViewerLevelCountResponses, GetLogViewerLevelCountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/log-viewer/level-count',
        ...options
    });
};

export const getLogViewerLog = <ThrowOnError extends boolean = false>(options?: Options<GetLogViewerLogData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLogViewerLogResponses, GetLogViewerLogErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/log-viewer/log',
        ...options
    });
};

export const getLogViewerMessageTemplate = <ThrowOnError extends boolean = false>(options?: Options<GetLogViewerMessageTemplateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLogViewerMessageTemplateResponses, GetLogViewerMessageTemplateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/log-viewer/message-template',
        ...options
    });
};

export const getLogViewerSavedSearch = <ThrowOnError extends boolean = false>(options?: Options<GetLogViewerSavedSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLogViewerSavedSearchResponses, GetLogViewerSavedSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/log-viewer/saved-search',
        ...options
    });
};

export const postLogViewerSavedSearch = <ThrowOnError extends boolean = false>(options?: Options<PostLogViewerSavedSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostLogViewerSavedSearchResponses, PostLogViewerSavedSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/log-viewer/saved-search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteLogViewerSavedSearchByName = <ThrowOnError extends boolean = false>(options: Options<DeleteLogViewerSavedSearchByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLogViewerSavedSearchByNameResponses, DeleteLogViewerSavedSearchByNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
        ...options
    });
};

export const getLogViewerSavedSearchByName = <ThrowOnError extends boolean = false>(options: Options<GetLogViewerSavedSearchByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLogViewerSavedSearchByNameResponses, GetLogViewerSavedSearchByNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
        ...options
    });
};

export const getLogViewerValidateLogsSize = <ThrowOnError extends boolean = false>(options?: Options<GetLogViewerValidateLogsSizeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLogViewerValidateLogsSizeResponses, GetLogViewerValidateLogsSizeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/log-viewer/validate-logs-size',
        ...options
    });
};

export const getManifestManifest = <ThrowOnError extends boolean = false>(options?: Options<GetManifestManifestData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetManifestManifestResponses, GetManifestManifestErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/manifest/manifest',
        ...options
    });
};

export const getManifestManifestPrivate = <ThrowOnError extends boolean = false>(options?: Options<GetManifestManifestPrivateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetManifestManifestPrivateResponses, GetManifestManifestPrivateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/manifest/manifest/private',
        ...options
    });
};

export const getManifestManifestPublic = <ThrowOnError extends boolean = false>(options?: Options<GetManifestManifestPublicData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetManifestManifestPublicResponses, unknown, ThrowOnError>({
        url: '/umbraco/management/api/v1/manifest/manifest/public',
        ...options
    });
};

export const getItemMediaType = <ThrowOnError extends boolean = false>(options?: Options<GetItemMediaTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMediaTypeResponses, GetItemMediaTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/media-type',
        ...options
    });
};

export const getItemMediaTypeAllowed = <ThrowOnError extends boolean = false>(options?: Options<GetItemMediaTypeAllowedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMediaTypeAllowedResponses, GetItemMediaTypeAllowedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/media-type/allowed',
        ...options
    });
};

export const getItemMediaTypeFolders = <ThrowOnError extends boolean = false>(options?: Options<GetItemMediaTypeFoldersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMediaTypeFoldersResponses, GetItemMediaTypeFoldersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/media-type/folders',
        ...options
    });
};

export const getItemMediaTypeSearch = <ThrowOnError extends boolean = false>(options?: Options<GetItemMediaTypeSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMediaTypeSearchResponses, GetItemMediaTypeSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/media-type/search',
        ...options
    });
};

export const postMediaType = <ThrowOnError extends boolean = false>(options?: Options<PostMediaTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMediaTypeResponses, PostMediaTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteMediaTypeById = <ThrowOnError extends boolean = false>(options: Options<DeleteMediaTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMediaTypeByIdResponses, DeleteMediaTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/{id}',
        ...options
    });
};

export const getMediaTypeById = <ThrowOnError extends boolean = false>(options: Options<GetMediaTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaTypeByIdResponses, GetMediaTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/{id}',
        ...options
    });
};

export const putMediaTypeById = <ThrowOnError extends boolean = false>(options: Options<PutMediaTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMediaTypeByIdResponses, PutMediaTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMediaTypeByIdAllowedChildren = <ThrowOnError extends boolean = false>(options: Options<GetMediaTypeByIdAllowedChildrenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaTypeByIdAllowedChildrenResponses, GetMediaTypeByIdAllowedChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/{id}/allowed-children',
        ...options
    });
};

export const getMediaTypeByIdCompositionReferences = <ThrowOnError extends boolean = false>(options: Options<GetMediaTypeByIdCompositionReferencesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaTypeByIdCompositionReferencesResponses, GetMediaTypeByIdCompositionReferencesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/{id}/composition-references',
        ...options
    });
};

export const postMediaTypeByIdCopy = <ThrowOnError extends boolean = false>(options: Options<PostMediaTypeByIdCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMediaTypeByIdCopyResponses, PostMediaTypeByIdCopyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/{id}/copy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMediaTypeByIdExport = <ThrowOnError extends boolean = false>(options: Options<GetMediaTypeByIdExportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaTypeByIdExportResponses, GetMediaTypeByIdExportErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/{id}/export',
        ...options
    });
};

export const putMediaTypeByIdImport = <ThrowOnError extends boolean = false>(options: Options<PutMediaTypeByIdImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMediaTypeByIdImportResponses, PutMediaTypeByIdImportErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/{id}/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putMediaTypeByIdMove = <ThrowOnError extends boolean = false>(options: Options<PutMediaTypeByIdMoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMediaTypeByIdMoveResponses, PutMediaTypeByIdMoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/{id}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMediaTypeAllowedAtRoot = <ThrowOnError extends boolean = false>(options?: Options<GetMediaTypeAllowedAtRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMediaTypeAllowedAtRootResponses, GetMediaTypeAllowedAtRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/allowed-at-root',
        ...options
    });
};

export const postMediaTypeAvailableCompositions = <ThrowOnError extends boolean = false>(options?: Options<PostMediaTypeAvailableCompositionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMediaTypeAvailableCompositionsResponses, PostMediaTypeAvailableCompositionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/available-compositions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getMediaTypeConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetMediaTypeConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMediaTypeConfigurationResponses, GetMediaTypeConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/configuration',
        ...options
    });
};

export const postMediaTypeFolder = <ThrowOnError extends boolean = false>(options?: Options<PostMediaTypeFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMediaTypeFolderResponses, PostMediaTypeFolderErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/folder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteMediaTypeFolderById = <ThrowOnError extends boolean = false>(options: Options<DeleteMediaTypeFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMediaTypeFolderByIdResponses, DeleteMediaTypeFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/folder/{id}',
        ...options
    });
};

export const getMediaTypeFolderById = <ThrowOnError extends boolean = false>(options: Options<GetMediaTypeFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaTypeFolderByIdResponses, GetMediaTypeFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/folder/{id}',
        ...options
    });
};

export const putMediaTypeFolderById = <ThrowOnError extends boolean = false>(options: Options<PutMediaTypeFolderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMediaTypeFolderByIdResponses, PutMediaTypeFolderByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/folder/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postMediaTypeImport = <ThrowOnError extends boolean = false>(options?: Options<PostMediaTypeImportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMediaTypeImportResponses, PostMediaTypeImportErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media-type/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTreeMediaTypeAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeMediaTypeAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeMediaTypeAncestorsResponses, GetTreeMediaTypeAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/media-type/ancestors',
        ...options
    });
};

export const getTreeMediaTypeChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeMediaTypeChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeMediaTypeChildrenResponses, GetTreeMediaTypeChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/media-type/children',
        ...options
    });
};

export const getTreeMediaTypeRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeMediaTypeRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeMediaTypeRootResponses, GetTreeMediaTypeRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/media-type/root',
        ...options
    });
};

export const getCollectionMedia = <ThrowOnError extends boolean = false>(options?: Options<GetCollectionMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCollectionMediaResponses, GetCollectionMediaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/collection/media',
        ...options
    });
};

export const getItemMedia = <ThrowOnError extends boolean = false>(options?: Options<GetItemMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMediaResponses, GetItemMediaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/media',
        ...options
    });
};

export const getItemMediaSearch = <ThrowOnError extends boolean = false>(options?: Options<GetItemMediaSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMediaSearchResponses, GetItemMediaSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/media/search',
        ...options
    });
};

export const postMedia = <ThrowOnError extends boolean = false>(options?: Options<PostMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMediaResponses, PostMediaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteMediaById = <ThrowOnError extends boolean = false>(options: Options<DeleteMediaByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMediaByIdResponses, DeleteMediaByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/{id}',
        ...options
    });
};

export const getMediaById = <ThrowOnError extends boolean = false>(options: Options<GetMediaByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaByIdResponses, GetMediaByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/{id}',
        ...options
    });
};

export const putMediaById = <ThrowOnError extends boolean = false>(options: Options<PutMediaByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMediaByIdResponses, PutMediaByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMediaByIdAuditLog = <ThrowOnError extends boolean = false>(options: Options<GetMediaByIdAuditLogData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaByIdAuditLogResponses, GetMediaByIdAuditLogErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/{id}/audit-log',
        ...options
    });
};

export const putMediaByIdMove = <ThrowOnError extends boolean = false>(options: Options<PutMediaByIdMoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMediaByIdMoveResponses, PutMediaByIdMoveErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/{id}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putMediaByIdMoveToRecycleBin = <ThrowOnError extends boolean = false>(options: Options<PutMediaByIdMoveToRecycleBinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMediaByIdMoveToRecycleBinResponses, PutMediaByIdMoveToRecycleBinErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/{id}/move-to-recycle-bin',
        ...options
    });
};

export const getMediaByIdReferencedBy = <ThrowOnError extends boolean = false>(options: Options<GetMediaByIdReferencedByData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaByIdReferencedByResponses, GetMediaByIdReferencedByErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/{id}/referenced-by',
        ...options
    });
};

export const getMediaByIdReferencedDescendants = <ThrowOnError extends boolean = false>(options: Options<GetMediaByIdReferencedDescendantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaByIdReferencedDescendantsResponses, GetMediaByIdReferencedDescendantsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/{id}/referenced-descendants',
        ...options
    });
};

export const putMediaByIdValidate = <ThrowOnError extends boolean = false>(options: Options<PutMediaByIdValidateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMediaByIdValidateResponses, PutMediaByIdValidateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/{id}/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMediaAreReferenced = <ThrowOnError extends boolean = false>(options?: Options<GetMediaAreReferencedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMediaAreReferencedResponses, GetMediaAreReferencedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/are-referenced',
        ...options
    });
};

/**
 * @deprecated
 */
export const getMediaConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetMediaConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMediaConfigurationResponses, GetMediaConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/configuration',
        ...options
    });
};

export const putMediaSort = <ThrowOnError extends boolean = false>(options?: Options<PutMediaSortData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutMediaSortResponses, PutMediaSortErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/sort',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getMediaUrls = <ThrowOnError extends boolean = false>(options?: Options<GetMediaUrlsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMediaUrlsResponses, GetMediaUrlsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/urls',
        ...options
    });
};

export const postMediaValidate = <ThrowOnError extends boolean = false>(options?: Options<PostMediaValidateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMediaValidateResponses, PostMediaValidateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/media/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteRecycleBinMedia = <ThrowOnError extends boolean = false>(options?: Options<DeleteRecycleBinMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteRecycleBinMediaResponses, DeleteRecycleBinMediaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/media',
        ...options
    });
};

export const deleteRecycleBinMediaById = <ThrowOnError extends boolean = false>(options: Options<DeleteRecycleBinMediaByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRecycleBinMediaByIdResponses, DeleteRecycleBinMediaByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/media/{id}',
        ...options
    });
};

export const getRecycleBinMediaByIdOriginalParent = <ThrowOnError extends boolean = false>(options: Options<GetRecycleBinMediaByIdOriginalParentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRecycleBinMediaByIdOriginalParentResponses, GetRecycleBinMediaByIdOriginalParentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent',
        ...options
    });
};

export const putRecycleBinMediaByIdRestore = <ThrowOnError extends boolean = false>(options: Options<PutRecycleBinMediaByIdRestoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutRecycleBinMediaByIdRestoreResponses, PutRecycleBinMediaByIdRestoreErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/media/{id}/restore',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getRecycleBinMediaChildren = <ThrowOnError extends boolean = false>(options?: Options<GetRecycleBinMediaChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecycleBinMediaChildrenResponses, GetRecycleBinMediaChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/media/children',
        ...options
    });
};

export const getRecycleBinMediaReferencedBy = <ThrowOnError extends boolean = false>(options?: Options<GetRecycleBinMediaReferencedByData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecycleBinMediaReferencedByResponses, GetRecycleBinMediaReferencedByErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/media/referenced-by',
        ...options
    });
};

export const getRecycleBinMediaRoot = <ThrowOnError extends boolean = false>(options?: Options<GetRecycleBinMediaRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRecycleBinMediaRootResponses, GetRecycleBinMediaRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/recycle-bin/media/root',
        ...options
    });
};

export const getTreeMediaAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeMediaAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeMediaAncestorsResponses, GetTreeMediaAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/media/ancestors',
        ...options
    });
};

export const getTreeMediaChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeMediaChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeMediaChildrenResponses, GetTreeMediaChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/media/children',
        ...options
    });
};

export const getUmbracoManagementApiV1TreeMediaFolders = <ThrowOnError extends boolean = false>(options?: Options<GetUmbracoManagementApiV1TreeMediaFoldersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUmbracoManagementApiV1TreeMediaFoldersResponses, GetUmbracoManagementApiV1TreeMediaFoldersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/media/folders',
        ...options
    });
};

export const getUmbracoManagementApiV11TreeMediaFolders = <ThrowOnError extends boolean = false>(options?: Options<GetUmbracoManagementApiV11TreeMediaFoldersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUmbracoManagementApiV11TreeMediaFoldersResponses, GetUmbracoManagementApiV11TreeMediaFoldersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1.1/tree/media/folders',
        ...options
    });
};

export const getUmbracoManagementApiV2TreeMediaFolders = <ThrowOnError extends boolean = false>(options?: Options<GetUmbracoManagementApiV2TreeMediaFoldersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUmbracoManagementApiV2TreeMediaFoldersResponses, GetUmbracoManagementApiV2TreeMediaFoldersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v2/tree/media/folders',
        ...options
    });
};

export const getTreeMediaRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeMediaRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeMediaRootResponses, GetTreeMediaRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/media/root',
        ...options
    });
};

export const getItemMemberGroup = <ThrowOnError extends boolean = false>(options?: Options<GetItemMemberGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMemberGroupResponses, GetItemMemberGroupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/member-group',
        ...options
    });
};

export const getMemberGroup = <ThrowOnError extends boolean = false>(options?: Options<GetMemberGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMemberGroupResponses, GetMemberGroupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-group',
        ...options
    });
};

export const postMemberGroup = <ThrowOnError extends boolean = false>(options?: Options<PostMemberGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMemberGroupResponses, PostMemberGroupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteMemberGroupById = <ThrowOnError extends boolean = false>(options: Options<DeleteMemberGroupByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMemberGroupByIdResponses, DeleteMemberGroupByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-group/{id}',
        ...options
    });
};

export const getMemberGroupById = <ThrowOnError extends boolean = false>(options: Options<GetMemberGroupByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMemberGroupByIdResponses, GetMemberGroupByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-group/{id}',
        ...options
    });
};

export const putMemberGroupById = <ThrowOnError extends boolean = false>(options: Options<PutMemberGroupByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMemberGroupByIdResponses, PutMemberGroupByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-group/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getTreeMemberGroupRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeMemberGroupRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeMemberGroupRootResponses, GetTreeMemberGroupRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/member-group/root',
        ...options
    });
};

export const getItemMemberType = <ThrowOnError extends boolean = false>(options?: Options<GetItemMemberTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMemberTypeResponses, GetItemMemberTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/member-type',
        ...options
    });
};

export const getItemMemberTypeSearch = <ThrowOnError extends boolean = false>(options?: Options<GetItemMemberTypeSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMemberTypeSearchResponses, GetItemMemberTypeSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/member-type/search',
        ...options
    });
};

export const postMemberType = <ThrowOnError extends boolean = false>(options?: Options<PostMemberTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMemberTypeResponses, PostMemberTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-type',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteMemberTypeById = <ThrowOnError extends boolean = false>(options: Options<DeleteMemberTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMemberTypeByIdResponses, DeleteMemberTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-type/{id}',
        ...options
    });
};

export const getMemberTypeById = <ThrowOnError extends boolean = false>(options: Options<GetMemberTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMemberTypeByIdResponses, GetMemberTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-type/{id}',
        ...options
    });
};

export const putMemberTypeById = <ThrowOnError extends boolean = false>(options: Options<PutMemberTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMemberTypeByIdResponses, PutMemberTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-type/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMemberTypeByIdCompositionReferences = <ThrowOnError extends boolean = false>(options: Options<GetMemberTypeByIdCompositionReferencesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMemberTypeByIdCompositionReferencesResponses, GetMemberTypeByIdCompositionReferencesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-type/{id}/composition-references',
        ...options
    });
};

export const postMemberTypeByIdCopy = <ThrowOnError extends boolean = false>(options: Options<PostMemberTypeByIdCopyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMemberTypeByIdCopyResponses, PostMemberTypeByIdCopyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-type/{id}/copy',
        ...options
    });
};

export const postMemberTypeAvailableCompositions = <ThrowOnError extends boolean = false>(options?: Options<PostMemberTypeAvailableCompositionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMemberTypeAvailableCompositionsResponses, PostMemberTypeAvailableCompositionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-type/available-compositions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getMemberTypeConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetMemberTypeConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMemberTypeConfigurationResponses, GetMemberTypeConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member-type/configuration',
        ...options
    });
};

export const getTreeMemberTypeRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeMemberTypeRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeMemberTypeRootResponses, GetTreeMemberTypeRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/member-type/root',
        ...options
    });
};

export const getFilterMember = <ThrowOnError extends boolean = false>(options?: Options<GetFilterMemberData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFilterMemberResponses, GetFilterMemberErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/filter/member',
        ...options
    });
};

export const getItemMember = <ThrowOnError extends boolean = false>(options?: Options<GetItemMemberData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMemberResponses, GetItemMemberErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/member',
        ...options
    });
};

export const getItemMemberSearch = <ThrowOnError extends boolean = false>(options?: Options<GetItemMemberSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemMemberSearchResponses, GetItemMemberSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/member/search',
        ...options
    });
};

export const postMember = <ThrowOnError extends boolean = false>(options?: Options<PostMemberData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMemberResponses, PostMemberErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteMemberById = <ThrowOnError extends boolean = false>(options: Options<DeleteMemberByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMemberByIdResponses, DeleteMemberByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member/{id}',
        ...options
    });
};

export const getMemberById = <ThrowOnError extends boolean = false>(options: Options<GetMemberByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMemberByIdResponses, GetMemberByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member/{id}',
        ...options
    });
};

export const putMemberById = <ThrowOnError extends boolean = false>(options: Options<PutMemberByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMemberByIdResponses, PutMemberByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMemberByIdReferencedBy = <ThrowOnError extends boolean = false>(options: Options<GetMemberByIdReferencedByData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMemberByIdReferencedByResponses, GetMemberByIdReferencedByErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member/{id}/referenced-by',
        ...options
    });
};

export const getMemberByIdReferencedDescendants = <ThrowOnError extends boolean = false>(options: Options<GetMemberByIdReferencedDescendantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMemberByIdReferencedDescendantsResponses, GetMemberByIdReferencedDescendantsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member/{id}/referenced-descendants',
        ...options
    });
};

export const putMemberByIdValidate = <ThrowOnError extends boolean = false>(options: Options<PutMemberByIdValidateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutMemberByIdValidateResponses, PutMemberByIdValidateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member/{id}/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMemberAreReferenced = <ThrowOnError extends boolean = false>(options?: Options<GetMemberAreReferencedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMemberAreReferencedResponses, GetMemberAreReferencedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member/are-referenced',
        ...options
    });
};

export const getMemberConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetMemberConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMemberConfigurationResponses, GetMemberConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member/configuration',
        ...options
    });
};

export const postMemberValidate = <ThrowOnError extends boolean = false>(options?: Options<PostMemberValidateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostMemberValidateResponses, PostMemberValidateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/member/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postModelsBuilderBuild = <ThrowOnError extends boolean = false>(options?: Options<PostModelsBuilderBuildData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostModelsBuilderBuildResponses, PostModelsBuilderBuildErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/models-builder/build',
        ...options
    });
};

export const getModelsBuilderDashboard = <ThrowOnError extends boolean = false>(options?: Options<GetModelsBuilderDashboardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetModelsBuilderDashboardResponses, GetModelsBuilderDashboardErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/models-builder/dashboard',
        ...options
    });
};

export const getModelsBuilderStatus = <ThrowOnError extends boolean = false>(options?: Options<GetModelsBuilderStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetModelsBuilderStatusResponses, GetModelsBuilderStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/models-builder/status',
        ...options
    });
};

export const getObjectTypes = <ThrowOnError extends boolean = false>(options?: Options<GetObjectTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetObjectTypesResponses, GetObjectTypesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/object-types',
        ...options
    });
};

export const getOembedQuery = <ThrowOnError extends boolean = false>(options?: Options<GetOembedQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOembedQueryResponses, GetOembedQueryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/oembed/query',
        ...options
    });
};

export const postPackageByNameRunMigration = <ThrowOnError extends boolean = false>(options: Options<PostPackageByNameRunMigrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPackageByNameRunMigrationResponses, PostPackageByNameRunMigrationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/package/{name}/run-migration',
        ...options
    });
};

export const getPackageConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetPackageConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPackageConfigurationResponses, GetPackageConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/package/configuration',
        ...options
    });
};

export const getPackageCreated = <ThrowOnError extends boolean = false>(options?: Options<GetPackageCreatedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPackageCreatedResponses, GetPackageCreatedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/package/created',
        ...options
    });
};

export const postPackageCreated = <ThrowOnError extends boolean = false>(options?: Options<PostPackageCreatedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPackageCreatedResponses, PostPackageCreatedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/package/created',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deletePackageCreatedById = <ThrowOnError extends boolean = false>(options: Options<DeletePackageCreatedByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePackageCreatedByIdResponses, DeletePackageCreatedByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/package/created/{id}',
        ...options
    });
};

export const getPackageCreatedById = <ThrowOnError extends boolean = false>(options: Options<GetPackageCreatedByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageCreatedByIdResponses, GetPackageCreatedByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/package/created/{id}',
        ...options
    });
};

export const putPackageCreatedById = <ThrowOnError extends boolean = false>(options: Options<PutPackageCreatedByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPackageCreatedByIdResponses, PutPackageCreatedByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/package/created/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getPackageCreatedByIdDownload = <ThrowOnError extends boolean = false>(options: Options<GetPackageCreatedByIdDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageCreatedByIdDownloadResponses, GetPackageCreatedByIdDownloadErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/package/created/{id}/download',
        ...options
    });
};

export const getPackageMigrationStatus = <ThrowOnError extends boolean = false>(options?: Options<GetPackageMigrationStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPackageMigrationStatusResponses, GetPackageMigrationStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/package/migration-status',
        ...options
    });
};

export const getItemPartialView = <ThrowOnError extends boolean = false>(options?: Options<GetItemPartialViewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemPartialViewResponses, GetItemPartialViewErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/partial-view',
        ...options
    });
};

export const postPartialView = <ThrowOnError extends boolean = false>(options?: Options<PostPartialViewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPartialViewResponses, PostPartialViewErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/partial-view',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deletePartialViewByPath = <ThrowOnError extends boolean = false>(options: Options<DeletePartialViewByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePartialViewByPathResponses, DeletePartialViewByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/partial-view/{path}',
        ...options
    });
};

export const getPartialViewByPath = <ThrowOnError extends boolean = false>(options: Options<GetPartialViewByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPartialViewByPathResponses, GetPartialViewByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/partial-view/{path}',
        ...options
    });
};

export const putPartialViewByPath = <ThrowOnError extends boolean = false>(options: Options<PutPartialViewByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPartialViewByPathResponses, PutPartialViewByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/partial-view/{path}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putPartialViewByPathRename = <ThrowOnError extends boolean = false>(options: Options<PutPartialViewByPathRenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutPartialViewByPathRenameResponses, PutPartialViewByPathRenameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/partial-view/{path}/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postPartialViewFolder = <ThrowOnError extends boolean = false>(options?: Options<PostPartialViewFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPartialViewFolderResponses, PostPartialViewFolderErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/partial-view/folder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deletePartialViewFolderByPath = <ThrowOnError extends boolean = false>(options: Options<DeletePartialViewFolderByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePartialViewFolderByPathResponses, DeletePartialViewFolderByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/partial-view/folder/{path}',
        ...options
    });
};

export const getPartialViewFolderByPath = <ThrowOnError extends boolean = false>(options: Options<GetPartialViewFolderByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPartialViewFolderByPathResponses, GetPartialViewFolderByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/partial-view/folder/{path}',
        ...options
    });
};

export const getPartialViewSnippet = <ThrowOnError extends boolean = false>(options?: Options<GetPartialViewSnippetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPartialViewSnippetResponses, GetPartialViewSnippetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/partial-view/snippet',
        ...options
    });
};

export const getPartialViewSnippetById = <ThrowOnError extends boolean = false>(options: Options<GetPartialViewSnippetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPartialViewSnippetByIdResponses, GetPartialViewSnippetByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/partial-view/snippet/{id}',
        ...options
    });
};

export const getTreePartialViewAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreePartialViewAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreePartialViewAncestorsResponses, GetTreePartialViewAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/partial-view/ancestors',
        ...options
    });
};

export const getTreePartialViewChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreePartialViewChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreePartialViewChildrenResponses, GetTreePartialViewChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/partial-view/children',
        ...options
    });
};

export const getTreePartialViewRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreePartialViewRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreePartialViewRootResponses, GetTreePartialViewRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/partial-view/root',
        ...options
    });
};

export const deletePreview = <ThrowOnError extends boolean = false>(options?: Options<DeletePreviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeletePreviewResponses, unknown, ThrowOnError>({
        url: '/umbraco/management/api/v1/preview',
        ...options
    });
};

export const postPreview = <ThrowOnError extends boolean = false>(options?: Options<PostPreviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPreviewResponses, PostPreviewErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/preview',
        ...options
    });
};

export const getProfilingStatus = <ThrowOnError extends boolean = false>(options?: Options<GetProfilingStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProfilingStatusResponses, GetProfilingStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/profiling/status',
        ...options
    });
};

export const putProfilingStatus = <ThrowOnError extends boolean = false>(options?: Options<PutProfilingStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutProfilingStatusResponses, PutProfilingStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/profiling/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getPropertyTypeIsUsed = <ThrowOnError extends boolean = false>(options?: Options<GetPropertyTypeIsUsedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPropertyTypeIsUsedResponses, GetPropertyTypeIsUsedErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/property-type/is-used',
        ...options
    });
};

export const postPublishedCacheRebuild = <ThrowOnError extends boolean = false>(options?: Options<PostPublishedCacheRebuildData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPublishedCacheRebuildResponses, PostPublishedCacheRebuildErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/published-cache/rebuild',
        ...options
    });
};

export const getPublishedCacheRebuildStatus = <ThrowOnError extends boolean = false>(options?: Options<GetPublishedCacheRebuildStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPublishedCacheRebuildStatusResponses, GetPublishedCacheRebuildStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/published-cache/rebuild/status',
        ...options
    });
};

export const postPublishedCacheReload = <ThrowOnError extends boolean = false>(options?: Options<PostPublishedCacheReloadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPublishedCacheReloadResponses, PostPublishedCacheReloadErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/published-cache/reload',
        ...options
    });
};

export const getRedirectManagement = <ThrowOnError extends boolean = false>(options?: Options<GetRedirectManagementData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRedirectManagementResponses, GetRedirectManagementErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/redirect-management',
        ...options
    });
};

export const deleteRedirectManagementById = <ThrowOnError extends boolean = false>(options: Options<DeleteRedirectManagementByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRedirectManagementByIdResponses, DeleteRedirectManagementByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/redirect-management/{id}',
        ...options
    });
};

export const getRedirectManagementById = <ThrowOnError extends boolean = false>(options: Options<GetRedirectManagementByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRedirectManagementByIdResponses, GetRedirectManagementByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/redirect-management/{id}',
        ...options
    });
};

export const getRedirectManagementStatus = <ThrowOnError extends boolean = false>(options?: Options<GetRedirectManagementStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRedirectManagementStatusResponses, GetRedirectManagementStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/redirect-management/status',
        ...options
    });
};

export const postRedirectManagementStatus = <ThrowOnError extends boolean = false>(options?: Options<PostRedirectManagementStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostRedirectManagementStatusResponses, PostRedirectManagementStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/redirect-management/status',
        ...options
    });
};

export const getItemRelationType = <ThrowOnError extends boolean = false>(options?: Options<GetItemRelationTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemRelationTypeResponses, GetItemRelationTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/relation-type',
        ...options
    });
};

export const getRelationType = <ThrowOnError extends boolean = false>(options?: Options<GetRelationTypeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRelationTypeResponses, GetRelationTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/relation-type',
        ...options
    });
};

export const getRelationTypeById = <ThrowOnError extends boolean = false>(options: Options<GetRelationTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRelationTypeByIdResponses, GetRelationTypeByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/relation-type/{id}',
        ...options
    });
};

export const getRelationByRelationTypeId = <ThrowOnError extends boolean = false>(options: Options<GetRelationByRelationTypeIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRelationByRelationTypeIdResponses, GetRelationByRelationTypeIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/relation/type/{id}',
        ...options
    });
};

export const getItemScript = <ThrowOnError extends boolean = false>(options?: Options<GetItemScriptData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemScriptResponses, GetItemScriptErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/script',
        ...options
    });
};

export const postScript = <ThrowOnError extends boolean = false>(options?: Options<PostScriptData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostScriptResponses, PostScriptErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/script',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteScriptByPath = <ThrowOnError extends boolean = false>(options: Options<DeleteScriptByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteScriptByPathResponses, DeleteScriptByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/script/{path}',
        ...options
    });
};

export const getScriptByPath = <ThrowOnError extends boolean = false>(options: Options<GetScriptByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScriptByPathResponses, GetScriptByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/script/{path}',
        ...options
    });
};

export const putScriptByPath = <ThrowOnError extends boolean = false>(options: Options<PutScriptByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutScriptByPathResponses, PutScriptByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/script/{path}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putScriptByPathRename = <ThrowOnError extends boolean = false>(options: Options<PutScriptByPathRenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutScriptByPathRenameResponses, PutScriptByPathRenameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/script/{path}/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postScriptFolder = <ThrowOnError extends boolean = false>(options?: Options<PostScriptFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostScriptFolderResponses, PostScriptFolderErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/script/folder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteScriptFolderByPath = <ThrowOnError extends boolean = false>(options: Options<DeleteScriptFolderByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteScriptFolderByPathResponses, DeleteScriptFolderByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/script/folder/{path}',
        ...options
    });
};

export const getScriptFolderByPath = <ThrowOnError extends boolean = false>(options: Options<GetScriptFolderByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetScriptFolderByPathResponses, GetScriptFolderByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/script/folder/{path}',
        ...options
    });
};

export const getTreeScriptAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeScriptAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeScriptAncestorsResponses, GetTreeScriptAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/script/ancestors',
        ...options
    });
};

export const getTreeScriptChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeScriptChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeScriptChildrenResponses, GetTreeScriptChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/script/children',
        ...options
    });
};

export const getTreeScriptRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeScriptRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeScriptRootResponses, GetTreeScriptRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/script/root',
        ...options
    });
};

export const getSearcher = <ThrowOnError extends boolean = false>(options?: Options<GetSearcherData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSearcherResponses, GetSearcherErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/searcher',
        ...options
    });
};

export const getSearcherBySearcherNameQuery = <ThrowOnError extends boolean = false>(options: Options<GetSearcherBySearcherNameQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSearcherBySearcherNameQueryResponses, GetSearcherBySearcherNameQueryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/searcher/{searcherName}/query',
        ...options
    });
};

export const getSecurityConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetSecurityConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSecurityConfigurationResponses, GetSecurityConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/security/configuration',
        ...options
    });
};

export const postSecurityForgotPassword = <ThrowOnError extends boolean = false>(options?: Options<PostSecurityForgotPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSecurityForgotPasswordResponses, PostSecurityForgotPasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/security/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postSecurityForgotPasswordReset = <ThrowOnError extends boolean = false>(options?: Options<PostSecurityForgotPasswordResetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSecurityForgotPasswordResetResponses, PostSecurityForgotPasswordResetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/security/forgot-password/reset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postSecurityForgotPasswordVerify = <ThrowOnError extends boolean = false>(options?: Options<PostSecurityForgotPasswordVerifyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSecurityForgotPasswordVerifyResponses, PostSecurityForgotPasswordVerifyErrors, ThrowOnError>({
        url: '/umbraco/management/api/v1/security/forgot-password/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getSegment = <ThrowOnError extends boolean = false>(options?: Options<GetSegmentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSegmentResponses, GetSegmentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/segment',
        ...options
    });
};

export const getServerConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetServerConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerConfigurationResponses, unknown, ThrowOnError>({
        url: '/umbraco/management/api/v1/server/configuration',
        ...options
    });
};

export const getServerInformation = <ThrowOnError extends boolean = false>(options?: Options<GetServerInformationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerInformationResponses, GetServerInformationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/server/information',
        ...options
    });
};

export const getServerStatus = <ThrowOnError extends boolean = false>(options?: Options<GetServerStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerStatusResponses, GetServerStatusErrors, ThrowOnError>({
        url: '/umbraco/management/api/v1/server/status',
        ...options
    });
};

export const getServerTroubleshooting = <ThrowOnError extends boolean = false>(options?: Options<GetServerTroubleshootingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerTroubleshootingResponses, GetServerTroubleshootingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/server/troubleshooting',
        ...options
    });
};

export const getServerUpgradeCheck = <ThrowOnError extends boolean = false>(options?: Options<GetServerUpgradeCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServerUpgradeCheckResponses, GetServerUpgradeCheckErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/server/upgrade-check',
        ...options
    });
};

export const getItemStaticFile = <ThrowOnError extends boolean = false>(options?: Options<GetItemStaticFileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemStaticFileResponses, GetItemStaticFileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/static-file',
        ...options
    });
};

export const getTreeStaticFileAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeStaticFileAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeStaticFileAncestorsResponses, GetTreeStaticFileAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/static-file/ancestors',
        ...options
    });
};

export const getTreeStaticFileChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeStaticFileChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeStaticFileChildrenResponses, GetTreeStaticFileChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/static-file/children',
        ...options
    });
};

export const getTreeStaticFileRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeStaticFileRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeStaticFileRootResponses, GetTreeStaticFileRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/static-file/root',
        ...options
    });
};

export const getItemStylesheet = <ThrowOnError extends boolean = false>(options?: Options<GetItemStylesheetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemStylesheetResponses, GetItemStylesheetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/stylesheet',
        ...options
    });
};

export const postStylesheet = <ThrowOnError extends boolean = false>(options?: Options<PostStylesheetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostStylesheetResponses, PostStylesheetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/stylesheet',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteStylesheetByPath = <ThrowOnError extends boolean = false>(options: Options<DeleteStylesheetByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteStylesheetByPathResponses, DeleteStylesheetByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/stylesheet/{path}',
        ...options
    });
};

export const getStylesheetByPath = <ThrowOnError extends boolean = false>(options: Options<GetStylesheetByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStylesheetByPathResponses, GetStylesheetByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/stylesheet/{path}',
        ...options
    });
};

export const putStylesheetByPath = <ThrowOnError extends boolean = false>(options: Options<PutStylesheetByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutStylesheetByPathResponses, PutStylesheetByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/stylesheet/{path}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putStylesheetByPathRename = <ThrowOnError extends boolean = false>(options: Options<PutStylesheetByPathRenameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutStylesheetByPathRenameResponses, PutStylesheetByPathRenameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/stylesheet/{path}/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postStylesheetFolder = <ThrowOnError extends boolean = false>(options?: Options<PostStylesheetFolderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostStylesheetFolderResponses, PostStylesheetFolderErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/stylesheet/folder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteStylesheetFolderByPath = <ThrowOnError extends boolean = false>(options: Options<DeleteStylesheetFolderByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteStylesheetFolderByPathResponses, DeleteStylesheetFolderByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
        ...options
    });
};

export const getStylesheetFolderByPath = <ThrowOnError extends boolean = false>(options: Options<GetStylesheetFolderByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStylesheetFolderByPathResponses, GetStylesheetFolderByPathErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
        ...options
    });
};

export const getTreeStylesheetAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeStylesheetAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeStylesheetAncestorsResponses, GetTreeStylesheetAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/stylesheet/ancestors',
        ...options
    });
};

export const getTreeStylesheetChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeStylesheetChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeStylesheetChildrenResponses, GetTreeStylesheetChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/stylesheet/children',
        ...options
    });
};

export const getTreeStylesheetRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeStylesheetRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeStylesheetRootResponses, GetTreeStylesheetRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/stylesheet/root',
        ...options
    });
};

export const getTag = <ThrowOnError extends boolean = false>(options?: Options<GetTagData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagResponses, GetTagErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tag',
        ...options
    });
};

export const getTelemetry = <ThrowOnError extends boolean = false>(options?: Options<GetTelemetryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTelemetryResponses, GetTelemetryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/telemetry',
        ...options
    });
};

export const getTelemetryLevel = <ThrowOnError extends boolean = false>(options?: Options<GetTelemetryLevelData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTelemetryLevelResponses, GetTelemetryLevelErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/telemetry/level',
        ...options
    });
};

export const postTelemetryLevel = <ThrowOnError extends boolean = false>(options?: Options<PostTelemetryLevelData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTelemetryLevelResponses, PostTelemetryLevelErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/telemetry/level',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getItemTemplate = <ThrowOnError extends boolean = false>(options?: Options<GetItemTemplateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemTemplateResponses, GetItemTemplateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/template',
        ...options
    });
};

export const getItemTemplateSearch = <ThrowOnError extends boolean = false>(options?: Options<GetItemTemplateSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemTemplateSearchResponses, GetItemTemplateSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/template/search',
        ...options
    });
};

export const postTemplate = <ThrowOnError extends boolean = false>(options?: Options<PostTemplateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTemplateResponses, PostTemplateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/template',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteTemplateById = <ThrowOnError extends boolean = false>(options: Options<DeleteTemplateByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTemplateByIdResponses, DeleteTemplateByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/template/{id}',
        ...options
    });
};

export const getTemplateById = <ThrowOnError extends boolean = false>(options: Options<GetTemplateByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTemplateByIdResponses, GetTemplateByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/template/{id}',
        ...options
    });
};

export const putTemplateById = <ThrowOnError extends boolean = false>(options: Options<PutTemplateByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutTemplateByIdResponses, PutTemplateByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/template/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getTemplateConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetTemplateConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTemplateConfigurationResponses, GetTemplateConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/template/configuration',
        ...options
    });
};

export const postTemplateQueryExecute = <ThrowOnError extends boolean = false>(options?: Options<PostTemplateQueryExecuteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTemplateQueryExecuteResponses, PostTemplateQueryExecuteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/template/query/execute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getTemplateQuerySettings = <ThrowOnError extends boolean = false>(options?: Options<GetTemplateQuerySettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTemplateQuerySettingsResponses, GetTemplateQuerySettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/template/query/settings',
        ...options
    });
};

export const getTreeTemplateAncestors = <ThrowOnError extends boolean = false>(options?: Options<GetTreeTemplateAncestorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeTemplateAncestorsResponses, GetTreeTemplateAncestorsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/template/ancestors',
        ...options
    });
};

export const getTreeTemplateChildren = <ThrowOnError extends boolean = false>(options?: Options<GetTreeTemplateChildrenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeTemplateChildrenResponses, GetTreeTemplateChildrenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/template/children',
        ...options
    });
};

export const getTreeTemplateRoot = <ThrowOnError extends boolean = false>(options?: Options<GetTreeTemplateRootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTreeTemplateRootResponses, GetTreeTemplateRootErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/tree/template/root',
        ...options
    });
};

export const postTemporaryFile = <ThrowOnError extends boolean = false>(options?: Options<PostTemporaryFileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTemporaryFileResponses, PostTemporaryFileErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/temporary-file',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const deleteTemporaryFileById = <ThrowOnError extends boolean = false>(options: Options<DeleteTemporaryFileByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTemporaryFileByIdResponses, DeleteTemporaryFileByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/temporary-file/{id}',
        ...options
    });
};

export const getTemporaryFileById = <ThrowOnError extends boolean = false>(options: Options<GetTemporaryFileByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTemporaryFileByIdResponses, GetTemporaryFileByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/temporary-file/{id}',
        ...options
    });
};

export const getTemporaryFileConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetTemporaryFileConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTemporaryFileConfigurationResponses, GetTemporaryFileConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/temporary-file/configuration',
        ...options
    });
};

export const postUpgradeAuthorize = <ThrowOnError extends boolean = false>(options?: Options<PostUpgradeAuthorizeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUpgradeAuthorizeResponses, PostUpgradeAuthorizeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/upgrade/authorize',
        ...options
    });
};

export const getUpgradeSettings = <ThrowOnError extends boolean = false>(options?: Options<GetUpgradeSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUpgradeSettingsResponses, GetUpgradeSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/upgrade/settings',
        ...options
    });
};

export const getUserData = <ThrowOnError extends boolean = false>(options?: Options<GetUserDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserDataResponses, GetUserDataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-data',
        ...options
    });
};

export const postUserData = <ThrowOnError extends boolean = false>(options?: Options<PostUserDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserDataResponses, PostUserDataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putUserData = <ThrowOnError extends boolean = false>(options?: Options<PutUserDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutUserDataResponses, PutUserDataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getUserDataById = <ThrowOnError extends boolean = false>(options: Options<GetUserDataByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserDataByIdResponses, GetUserDataByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-data/{id}',
        ...options
    });
};

export const getFilterUserGroup = <ThrowOnError extends boolean = false>(options?: Options<GetFilterUserGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFilterUserGroupResponses, GetFilterUserGroupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/filter/user-group',
        ...options
    });
};

export const getItemUserGroup = <ThrowOnError extends boolean = false>(options?: Options<GetItemUserGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemUserGroupResponses, GetItemUserGroupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/user-group',
        ...options
    });
};

export const deleteUserGroup = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserGroupResponses, DeleteUserGroupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getUserGroup = <ThrowOnError extends boolean = false>(options?: Options<GetUserGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserGroupResponses, GetUserGroupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-group',
        ...options
    });
};

export const postUserGroup = <ThrowOnError extends boolean = false>(options?: Options<PostUserGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserGroupResponses, PostUserGroupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteUserGroupById = <ThrowOnError extends boolean = false>(options: Options<DeleteUserGroupByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserGroupByIdResponses, DeleteUserGroupByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-group/{id}',
        ...options
    });
};

export const getUserGroupById = <ThrowOnError extends boolean = false>(options: Options<GetUserGroupByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserGroupByIdResponses, GetUserGroupByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-group/{id}',
        ...options
    });
};

export const putUserGroupById = <ThrowOnError extends boolean = false>(options: Options<PutUserGroupByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUserGroupByIdResponses, PutUserGroupByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-group/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteUserGroupByIdUsers = <ThrowOnError extends boolean = false>(options: Options<DeleteUserGroupByIdUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserGroupByIdUsersResponses, DeleteUserGroupByIdUsersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-group/{id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postUserGroupByIdUsers = <ThrowOnError extends boolean = false>(options: Options<PostUserGroupByIdUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserGroupByIdUsersResponses, PostUserGroupByIdUsersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user-group/{id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getFilterUser = <ThrowOnError extends boolean = false>(options?: Options<GetFilterUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFilterUserResponses, GetFilterUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/filter/user',
        ...options
    });
};

export const getItemUser = <ThrowOnError extends boolean = false>(options?: Options<GetItemUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemUserResponses, GetItemUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/user',
        ...options
    });
};

export const deleteUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserResponses, GetUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user',
        ...options
    });
};

export const postUser = <ThrowOnError extends boolean = false>(options?: Options<PostUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserResponses, PostUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteUserById = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserByIdResponses, DeleteUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}',
        ...options
    });
};

export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}',
        ...options
    });
};

export const putUserById = <ThrowOnError extends boolean = false>(options: Options<PutUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutUserByIdResponses, PutUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUserById2Fa = <ThrowOnError extends boolean = false>(options: Options<GetUserById2FaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserById2FaResponses, GetUserById2FaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}/2fa',
        ...options
    });
};

export const deleteUserById2FaByProviderName = <ThrowOnError extends boolean = false>(options: Options<DeleteUserById2FaByProviderNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserById2FaByProviderNameResponses, DeleteUserById2FaByProviderNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}/2fa/{providerName}',
        ...options
    });
};

export const getUserByIdCalculateStartNodes = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdCalculateStartNodesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdCalculateStartNodesResponses, GetUserByIdCalculateStartNodesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}/calculate-start-nodes',
        ...options
    });
};

export const postUserByIdChangePassword = <ThrowOnError extends boolean = false>(options: Options<PostUserByIdChangePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserByIdChangePasswordResponses, PostUserByIdChangePasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUserByIdClientCredentials = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdClientCredentialsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdClientCredentialsResponses, GetUserByIdClientCredentialsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}/client-credentials',
        ...options
    });
};

export const postUserByIdClientCredentials = <ThrowOnError extends boolean = false>(options: Options<PostUserByIdClientCredentialsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserByIdClientCredentialsResponses, PostUserByIdClientCredentialsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}/client-credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteUserByIdClientCredentialsByClientId = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByIdClientCredentialsByClientIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserByIdClientCredentialsByClientIdResponses, DeleteUserByIdClientCredentialsByClientIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}/client-credentials/{clientId}',
        ...options
    });
};

export const postUserByIdResetPassword = <ThrowOnError extends boolean = false>(options: Options<PostUserByIdResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserByIdResetPasswordResponses, PostUserByIdResetPasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/{id}/reset-password',
        ...options
    });
};

export const deleteUserAvatarById = <ThrowOnError extends boolean = false>(options: Options<DeleteUserAvatarByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserAvatarByIdResponses, DeleteUserAvatarByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/avatar/{id}',
        ...options
    });
};

export const postUserAvatarById = <ThrowOnError extends boolean = false>(options: Options<PostUserAvatarByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserAvatarByIdResponses, PostUserAvatarByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/avatar/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUserConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetUserConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserConfigurationResponses, GetUserConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/configuration',
        ...options
    });
};

export const getUserCurrent = <ThrowOnError extends boolean = false>(options?: Options<GetUserCurrentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserCurrentResponses, GetUserCurrentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current',
        ...options
    });
};

export const getUserCurrent2Fa = <ThrowOnError extends boolean = false>(options?: Options<GetUserCurrent2FaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserCurrent2FaResponses, GetUserCurrent2FaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/2fa',
        ...options
    });
};

export const deleteUserCurrent2FaByProviderName = <ThrowOnError extends boolean = false>(options: Options<DeleteUserCurrent2FaByProviderNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserCurrent2FaByProviderNameResponses, DeleteUserCurrent2FaByProviderNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
        ...options
    });
};

export const getUserCurrent2FaByProviderName = <ThrowOnError extends boolean = false>(options: Options<GetUserCurrent2FaByProviderNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserCurrent2FaByProviderNameResponses, GetUserCurrent2FaByProviderNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
        ...options
    });
};

export const postUserCurrent2FaByProviderName = <ThrowOnError extends boolean = false>(options: Options<PostUserCurrent2FaByProviderNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserCurrent2FaByProviderNameResponses, PostUserCurrent2FaByProviderNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postUserCurrentAvatar = <ThrowOnError extends boolean = false>(options?: Options<PostUserCurrentAvatarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserCurrentAvatarResponses, PostUserCurrentAvatarErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/avatar',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postUserCurrentChangePassword = <ThrowOnError extends boolean = false>(options?: Options<PostUserCurrentChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserCurrentChangePasswordResponses, PostUserCurrentChangePasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getUserCurrentConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetUserCurrentConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserCurrentConfigurationResponses, GetUserCurrentConfigurationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/configuration',
        ...options
    });
};

export const getUserCurrentLoginProviders = <ThrowOnError extends boolean = false>(options?: Options<GetUserCurrentLoginProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserCurrentLoginProvidersResponses, GetUserCurrentLoginProvidersErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/login-providers',
        ...options
    });
};

export const getUserCurrentPermissions = <ThrowOnError extends boolean = false>(options?: Options<GetUserCurrentPermissionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserCurrentPermissionsResponses, GetUserCurrentPermissionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/permissions',
        ...options
    });
};

export const getUserCurrentPermissionsDocument = <ThrowOnError extends boolean = false>(options?: Options<GetUserCurrentPermissionsDocumentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserCurrentPermissionsDocumentResponses, GetUserCurrentPermissionsDocumentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/permissions/document',
        ...options
    });
};

export const getUserCurrentPermissionsMedia = <ThrowOnError extends boolean = false>(options?: Options<GetUserCurrentPermissionsMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserCurrentPermissionsMediaResponses, GetUserCurrentPermissionsMediaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/current/permissions/media',
        ...options
    });
};

export const postUserDisable = <ThrowOnError extends boolean = false>(options?: Options<PostUserDisableData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserDisableResponses, PostUserDisableErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/disable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postUserEnable = <ThrowOnError extends boolean = false>(options?: Options<PostUserEnableData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserEnableResponses, PostUserEnableErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/enable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postUserInvite = <ThrowOnError extends boolean = false>(options?: Options<PostUserInviteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserInviteResponses, PostUserInviteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/invite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postUserInviteCreatePassword = <ThrowOnError extends boolean = false>(options?: Options<PostUserInviteCreatePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserInviteCreatePasswordResponses, PostUserInviteCreatePasswordErrors, ThrowOnError>({
        url: '/umbraco/management/api/v1/user/invite/create-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postUserInviteResend = <ThrowOnError extends boolean = false>(options?: Options<PostUserInviteResendData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserInviteResendResponses, PostUserInviteResendErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/invite/resend',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postUserInviteVerify = <ThrowOnError extends boolean = false>(options?: Options<PostUserInviteVerifyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserInviteVerifyResponses, PostUserInviteVerifyErrors, ThrowOnError>({
        url: '/umbraco/management/api/v1/user/invite/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postUserSetUserGroups = <ThrowOnError extends boolean = false>(options?: Options<PostUserSetUserGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserSetUserGroupsResponses, PostUserSetUserGroupsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/set-user-groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postUserUnlock = <ThrowOnError extends boolean = false>(options?: Options<PostUserUnlockData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostUserUnlockResponses, PostUserUnlockErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/user/unlock',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getItemWebhook = <ThrowOnError extends boolean = false>(options?: Options<GetItemWebhookData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetItemWebhookResponses, GetItemWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/item/webhook',
        ...options
    });
};

export const getWebhook = <ThrowOnError extends boolean = false>(options?: Options<GetWebhookData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWebhookResponses, GetWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/webhook',
        ...options
    });
};

export const postWebhook = <ThrowOnError extends boolean = false>(options?: Options<PostWebhookData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostWebhookResponses, PostWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/webhook',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteWebhookById = <ThrowOnError extends boolean = false>(options: Options<DeleteWebhookByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWebhookByIdResponses, DeleteWebhookByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/webhook/{id}',
        ...options
    });
};

export const getWebhookById = <ThrowOnError extends boolean = false>(options: Options<GetWebhookByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWebhookByIdResponses, GetWebhookByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/webhook/{id}',
        ...options
    });
};

export const putWebhookById = <ThrowOnError extends boolean = false>(options: Options<PutWebhookByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutWebhookByIdResponses, PutWebhookByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/webhook/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getWebhookByIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetWebhookByIdLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWebhookByIdLogsResponses, GetWebhookByIdLogsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/webhook/{id}/logs',
        ...options
    });
};

export const getWebhookEvents = <ThrowOnError extends boolean = false>(options?: Options<GetWebhookEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWebhookEventsResponses, GetWebhookEventsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/webhook/events',
        ...options
    });
};

export const getWebhookLogs = <ThrowOnError extends boolean = false>(options?: Options<GetWebhookLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWebhookLogsResponses, GetWebhookLogsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/umbraco/management/api/v1/webhook/logs',
        ...options
    });
};